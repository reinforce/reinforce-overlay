--- a/dlls/wined3d/wined3d_main.c	
+++ a/dlls/wined3d/wined3d_main.c	
@@ -48,6 +48,10 @@ struct wined3d_wndproc_table
 
 static struct wined3d_wndproc_table wndproc_table;
 
+int num_lock = 0;
+void (CDECL *wine_tsx11_lock_ptr)(void) = NULL;
+void (CDECL *wine_tsx11_unlock_ptr)(void) = NULL;
+
 static CRITICAL_SECTION wined3d_cs;
 static CRITICAL_SECTION_DEBUG wined3d_cs_debug =
 {
@@ -128,9 +132,14 @@ static DWORD get_config_key_dword(HKEY defkey, HKEY appkey, const char *name, DW
     return ERROR_FILE_NOT_FOUND;
 }
 
+static void CDECL wined3d_do_nothing(void)
+{
+}
+
 static BOOL wined3d_dll_init(HINSTANCE hInstDLL)
 {
     DWORD wined3d_context_tls_idx;
+    HMODULE mod;
     char buffer[MAX_PATH+10];
     DWORD size = sizeof(buffer);
     HKEY hkey = 0;
@@ -174,6 +183,17 @@ static BOOL wined3d_dll_init(HINSTANCE hInstDLL)
 
     DisableThreadLibraryCalls(hInstDLL);
 
+    mod = GetModuleHandleA( "winex11.drv" );
+    if (mod)
+    {
+        wine_tsx11_lock_ptr   = (void *)GetProcAddress( mod, "wine_tsx11_lock" );
+        wine_tsx11_unlock_ptr = (void *)GetProcAddress( mod, "wine_tsx11_unlock" );
+    }
+    else /* We are most likely on Windows */
+    {
+        wine_tsx11_lock_ptr   = wined3d_do_nothing;
+        wine_tsx11_unlock_ptr = wined3d_do_nothing;
+    }
     /* @@ Wine registry key: HKCU\Software\Wine\Direct3D */
     if ( RegOpenKeyA( HKEY_CURRENT_USER, "Software\\Wine\\Direct3D", &hkey ) ) hkey = 0;
 
--- a/dlls/wined3d/wined3d_private.h	
+++ a/dlls/wined3d/wined3d_private.h	
@@ -790,8 +790,21 @@ extern const struct wined3d_shader_backend_ops glsl_shader_backend DECLSPEC_HIDD
 extern const struct wined3d_shader_backend_ops arb_program_shader_backend DECLSPEC_HIDDEN;
 extern const struct wined3d_shader_backend_ops none_shader_backend DECLSPEC_HIDDEN;
 
+/* X11 locking */
+
+extern void (CDECL *wine_tsx11_lock_ptr)(void) DECLSPEC_HIDDEN;
+extern void (CDECL *wine_tsx11_unlock_ptr)(void) DECLSPEC_HIDDEN;
+
+/* As GLX relies on X, this is needed */
+extern int num_lock DECLSPEC_HIDDEN;
+
+#if 1
+#define ENTER_GL() wine_tsx11_lock_ptr()
+#define LEAVE_GL() wine_tsx11_unlock_ptr()
+#else
 #define ENTER_GL() do {} while(0)
 #define LEAVE_GL() do {} while(0)
+#endif
 
 /*****************************************************************************
  * Defines
--- a/dlls/winex11.drv/event.c	
+++ a/dlls/winex11.drv/event.c	
@@ -374,6 +374,16 @@ static inline void call_event_handler( Display *display, XEvent *event )
 }
 
 
+static Bool magic_XCheckIfEvent(Display *display, XEvent *event, Bool (*filter)(Display*, XEvent*,XPointer), char *arg)
+{
+int ret;
+wine_tsx11_lock();
+ret = XCheckIfEvent( display, event, filter, arg );
+wine_tsx11_unlock();
+return ret;
+}
+
+
 /***********************************************************************
  *           process_events
  */
@@ -384,7 +394,7 @@ static int process_events( Display *display, Bool (*filter)(Display*, XEvent*,XP
     enum event_merge_action action = MERGE_DISCARD;
 
     prev_event.type = 0;
-    while (XCheckIfEvent( display, &event, filter, (char *)arg ))
+    while (magic_XCheckIfEvent( display, &event, filter, (char *)arg ))
     {
         count++;
         if (XFilterEvent( &event, None ))
--- a/dlls/winex11.drv/winex11.drv.spec	
+++ a/dlls/winex11.drv/winex11.drv.spec	
@@ -61,6 +61,10 @@ 
 @ cdecl LoadTabletInfo(long) X11DRV_LoadTabletInfo
 @ cdecl WTInfoW(long long ptr) X11DRV_WTInfoW
 
+# X11 locks
+@ cdecl -norelay wine_tsx11_lock()
+@ cdecl -norelay wine_tsx11_unlock()
+
 # Desktop
 @ cdecl wine_create_desktop(long long) X11DRV_create_desktop
 
--- a/dlls/winex11.drv/x11drv.h	
+++ a/dlls/winex11.drv/x11drv.h	
@@ -63,6 +63,9 @@ typedef int Status;
 
 #define WINE_XDND_VERSION 4
 
+extern void CDECL wine_tsx11_lock(void);
+extern void CDECL wine_tsx11_unlock(void);
+
   /* X physical pen */
 typedef struct
 {
--- a/dlls/winex11.drv/x11drv_main.c	
+++ a/dlls/winex11.drv/x11drv_main.c	
@@ -56,6 +56,15 @@ WINE_DEFAULT_DEBUG_CHANNEL(x11drv);
 WINE_DECLARE_DEBUG_CHANNEL(synchronous);
 WINE_DECLARE_DEBUG_CHANNEL(winediag);
 
+static CRITICAL_SECTION X11DRV_CritSection;
+static CRITICAL_SECTION_DEBUG critsect_debug =
+{
+    0, 0, &X11DRV_CritSection,
+    { &critsect_debug.ProcessLocksList, &critsect_debug.ProcessLocksList },
+      0, 0, { (DWORD_PTR)(__FILE__ ": X11DRV_CritSection") }
+};
+static CRITICAL_SECTION X11DRV_CritSection = { &critsect_debug, -1, 0, 0, 0, 0 };
+
 static Screen *screen;
 Visual *visual;
 XPixmapFormatValues **pixmap_formats;
@@ -292,6 +301,23 @@ static int error_handler( Display *display, XErrorEvent *error_evt )
 }
 
 /***********************************************************************
+ *		wine_tsx11_lock   (X11DRV.@)
+ */
+void CDECL wine_tsx11_lock(void)
+{
+    EnterCriticalSection( &X11DRV_CritSection );
+}
+
+/***********************************************************************
+ *		wine_tsx11_unlock   (X11DRV.@)
+ */
+void CDECL wine_tsx11_unlock(void)
+{
+    LeaveCriticalSection( &X11DRV_CritSection );
+}
+
+
+/***********************************************************************
  *		init_pixmap_formats
  */
 static void init_pixmap_formats( Display *display )
