diff -pru dhcp-4.1.1/client/dhc6.c dhcp-4.1.1-build/client/dhc6.c
--- dhcp-4.1.1/client/dhc6.c	2009-07-24 18:04:51.000000000 -0400
+++ dhcp-4.1.1-build/client/dhc6.c	2010-04-23 15:34:44.000000000 -0400
@@ -127,7 +127,7 @@ extern int stateless;
  * is not how it is intended.  Upcoming rearchitecting the client should
  * address this "one daemon model."
  */
-void
+isc_result_t
 form_duid(struct data_string *duid, const char *file, int line)
 {
 	struct interface_info *ip;
@@ -139,6 +139,15 @@ form_duid(struct data_string *duid, cons
 	if (ip == NULL)
 		log_fatal("Impossible condition at %s:%d.", MDL);
 
+	while (ip && ip->hw_address.hbuf[0] == HTYPE_RESERVED) {
+		/* Try the other interfaces */
+		log_debug("Cannot form default DUID from interface %s.", ip->name);
+		ip = ip->next;
+	}
+	if (ip == NULL) {
+		return ISC_R_UNEXPECTED;
+	}
+
 	if ((ip->hw_address.hlen == 0) ||
 	    (ip->hw_address.hlen > sizeof(ip->hw_address.hbuf)))
 		log_fatal("Impossible hardware address length at %s:%d.", MDL);
@@ -171,6 +180,7 @@ form_duid(struct data_string *duid, cons
 		memcpy(duid->buffer->data + 4, ip->hw_address.hbuf + 1,
 		       ip->hw_address.hlen - 1);
 	}
+	return ISC_R_SUCCESS;
 }
 
 /*
@@ -5066,7 +5076,8 @@ make_client6_options(struct client_state
 	 */
 	if ((oc = lookup_option(&dhcpv6_universe, *op,
 				D6O_CLIENTID)) == NULL) {
-		if (!option_cache(&oc, &default_duid, NULL, clientid_option,
+		if (default_duid.len == 0 ||
+		    !option_cache(&oc, &default_duid, NULL, clientid_option,
 				  MDL))
 			log_fatal("Failure assembling a DUID.");
 
diff -pru dhcp-4.1.1/client/dhclient.c dhcp-4.1.1-build/client/dhclient.c
--- dhcp-4.1.1/client/dhclient.c	2010-01-07 16:47:40.000000000 -0500
+++ dhcp-4.1.1-build/client/dhclient.c	2010-04-26 14:49:39.000000000 -0400
@@ -534,8 +534,8 @@ main(int argc, char **argv) {
 			if (default_duid.buffer != NULL)
 				data_string_forget(&default_duid, MDL);
 
-			form_duid(&default_duid, MDL);
-			write_duid(&default_duid);
+			if (form_duid(&default_duid, MDL) == ISC_R_SUCCESS)
+				write_duid(&default_duid);
 		}
 
 		for (ip = interfaces ; ip != NULL ; ip = ip->next) {
diff -pru dhcp-4.1.1/common/bpf.c dhcp-4.1.1-build/common/bpf.c
--- dhcp-4.1.1/common/bpf.c	2009-07-24 18:04:52.000000000 -0400
+++ dhcp-4.1.1-build/common/bpf.c	2010-04-26 14:50:24.000000000 -0400
@@ -596,6 +596,22 @@ get_hw_addr(const char *name, struct har
                         memcpy(&hw->hbuf[1], LLADDR(sa), sa->sdl_alen);
                         break;
 #endif /* IFT_FDDI */
+#if defined(IFT_PPP)
+                case IFT_PPP:
+			if (local_family != AF_INET6)
+				log_fatal("Unsupported device type %d for \"%s\"",
+				           sa->sdl_type, name);
+			hw->hlen = 0;
+			hw->hbuf[0] = HTYPE_RESERVED;
+			/* 0xdeadbeef should never occur on the wire, and is a signature that
+			 * something went wrong.
+			 */
+			hw->hbuf[1] = 0xde;
+			hw->hbuf[2] = 0xad;
+			hw->hbuf[3] = 0xbe;
+			hw->hbuf[4] = 0xef;
+			break;
+#endif
                 default:
                         log_fatal("Unsupported device type %d for \"%s\"",
                                   sa->sdl_type, name);
diff -pru dhcp-4.1.1/common/lpf.c dhcp-4.1.1-build/common/lpf.c
--- dhcp-4.1.1/common/lpf.c	2009-07-23 15:02:09.000000000 -0400
+++ dhcp-4.1.1-build/common/lpf.c	2010-04-26 12:03:08.000000000 -0400
@@ -454,6 +454,22 @@ get_hw_addr(const char *name, struct har
 			hw->hbuf[0] = HTYPE_FDDI;
 			memcpy(&hw->hbuf[1], sa->sa_data, 16);
 			break;
+#if defined(ARPHRD_PPP)
+                case ARPHRD_PPP:
+			if (local_family != AF_INET6)
+				log_fatal("Unsupported device type %d for \"%s\"",
+				           sa->sa_family, name);
+			hw->hlen = 0;
+			hw->hbuf[0] = HTYPE_RESERVED;
+			/* 0xdeadbeef should never occur on the wire, and is a signature that
+			 * something went wrong.
+			 */
+			hw->hbuf[1] = 0xde;
+			hw->hbuf[2] = 0xad;
+			hw->hbuf[3] = 0xbe;
+			hw->hbuf[4] = 0xef;
+			break;
+#endif
 		default:
 			log_fatal("Unsupported device type %ld for \"%s\"",
 				  (long int)sa->sa_family, name);
diff -pru dhcp-4.1.1/includes/dhcpd.h dhcp-4.1.1-build/includes/dhcpd.h
--- dhcp-4.1.1/includes/dhcpd.h	2009-07-23 15:02:09.000000000 -0400
+++ dhcp-4.1.1-build/includes/dhcpd.h	2010-04-23 15:34:44.000000000 -0400
@@ -2545,7 +2545,7 @@ void dhcpv4_client_assignments(void);
 void dhcpv6_client_assignments(void);
 
 /* dhc6.c */
-void form_duid(struct data_string *duid, const char *file, int line);
+isc_result_t form_duid(struct data_string *duid, const char *file, int line);
 void dhc6_lease_destroy(struct dhc6_lease **src, const char *file, int line);
 void start_init6(struct client_state *client);
 void start_info_request6(struct client_state *client);
diff -pru dhcp-4.1.1/includes/dhcp.h dhcp-4.1.1-build/includes/dhcp.h
--- dhcp-4.1.1/includes/dhcp.h	2009-07-24 18:04:52.000000000 -0400
+++ dhcp-4.1.1-build/includes/dhcp.h	2010-04-23 15:34:44.000000000 -0400
@@ -80,6 +80,8 @@ struct dhcp_packet {
 #define HTYPE_IEEE802	6               /* IEEE 802.2 Token Ring...	*/
 #define HTYPE_FDDI	8		/* FDDI...			*/
 
+#define HTYPE_RESERVED  0               /* RFC 5494 */
+
 /* Magic cookie validating dhcp options field (and bootp vendor
    extensions field). */
 #define DHCP_OPTIONS_COOKIE	"\143\202\123\143"
diff -pru dhcp-4.1.1/server/dhcpv6.c dhcp-4.1.1-build/server/dhcpv6.c
--- dhcp-4.1.1/server/dhcpv6.c	2009-09-30 17:01:20.000000000 -0400
+++ dhcp-4.1.1-build/server/dhcpv6.c	2010-04-23 15:34:44.000000000 -0400
@@ -299,6 +299,9 @@ generate_new_server_duid(void) {
 		if (p->hw_address.hlen > 0) {
 			break;
 		}
+		if (p->next == NULL && p->hw_address.hbuf[0] == HTYPE_RESERVED) {
+			log_error("Can not generate DUID from interfaces which do not have hardware addresses, please configure server-duid!");
+		}
 	}
 	if (p == NULL) {
 		return ISC_R_UNEXPECTED;
