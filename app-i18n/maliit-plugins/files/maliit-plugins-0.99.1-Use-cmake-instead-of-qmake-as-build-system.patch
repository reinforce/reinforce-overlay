From f7dd58e91013785f29c9d190d333440a8d924c45 Mon Sep 17 00:00:00 2001
From: Jan Arne Petersen <janarne@gmail.com>
Date: Fri, 27 Nov 2015 23:28:21 +0100
Subject: [PATCH] Use cmake instead of qmake as build system

Fixes: maliit/plugins#9
---
 CMakeLists.txt                                     | 293 ++++++++++
 VERSION                                            |   1 -
 cmake/FindHunspell.cmake                           |  15 +
 cmake/FindPresage.cmake                            |  11 +
 config.pri                                         |  52 --
 doc/doc.pro                                        |  24 -
 doc/doxyfile.conf.in                               |   6 +-
 maliit-keyboard/benchmark/benchmark.pro            |  16 -
 maliit-keyboard/config-plugin.pri                  |   2 -
 maliit-keyboard/config.pri                         |  44 --
 maliit-keyboard/data/data.pro                      |  20 -
 maliit-keyboard/lib/lib.pro                        |  16 -
 maliit-keyboard/lib/logic/logic.pri                |  37 --
 .../lib/logic/state-machines/state-machines.pri    |  15 -
 maliit-keyboard/lib/models/models.pri              |  29 -
 maliit-keyboard/lib/parser/parser.pri              |  34 --
 maliit-keyboard/maliit-keyboard.pro                |  18 -
 maliit-keyboard/plugin/inputmethod.cpp             |   6 +-
 maliit-keyboard/plugin/plugin.pro                  |  39 --
 maliit-keyboard/qml/qml.pro                        |  14 -
 maliit-keyboard/tests/common-check.pri             |  25 -
 maliit-keyboard/tests/common/common.pro            |  25 -
 maliit-keyboard/tests/common/utils-gui.cpp         |   3 -
 maliit-keyboard/tests/editor/.gitignore            |   1 -
 maliit-keyboard/tests/editor/editor.pro            |  19 -
 maliit-keyboard/tests/editor/main.cpp              | 210 -------
 maliit-keyboard/tests/editor/wordengineprobe.cpp   |  76 ---
 maliit-keyboard/tests/editor/wordengineprobe.h     |  61 --
 .../language-layout-loading.cpp                    | 625 ++++++++++++++++++++
 .../language-layout-loading.pro                    |  27 -
 .../tests/language-layout-loading/main.cpp         | 625 --------------------
 .../language-layout-switching.cpp                  | 124 ++++
 .../language-layout-switching.pro                  |  23 -
 .../tests/language-layout-switching/main.cpp       | 123 ----
 maliit-keyboard/tests/preedit-string/main.cpp      | 626 ---------------------
 .../tests/preedit-string/preedit-string.cpp        | 619 ++++++++++++++++++++
 .../tests/preedit-string/preedit-string.pro        |  25 -
 maliit-keyboard/tests/repeat-backspace/main.cpp    | 219 -------
 .../tests/repeat-backspace/repeat-backspace.cpp    | 219 +++++++
 .../tests/repeat-backspace/repeat-backspace.pro    |  19 -
 maliit-keyboard/tests/tests.pro                    |  14 -
 maliit-keyboard/tests/ut_editor/.gitignore         |   1 +
 maliit-keyboard/tests/ut_editor/ut_editor.cpp      | 211 +++++++
 .../tests/ut_editor/wordengineprobe.cpp            |  76 +++
 maliit-keyboard/tests/ut_editor/wordengineprobe.h  |  61 ++
 maliit-keyboard/tests/word-candidates/main.cpp     | 243 --------
 .../tests/word-candidates/word-candidates.cpp      | 244 ++++++++
 .../tests/word-candidates/word-candidates.pro      |  22 -
 maliit-keyboard/view/view.pri                      |   7 -
 maliit-keyboard/view/view.pro                      |  39 --
 maliit-keyboard/word-prediction.pri                |  15 -
 maliit-plugins.pro                                 |  86 ---
 maliit-plugins.pro.coverage                        |  19 -
 nemo-keyboard/nemo-keyboard.pro                    |  20 -
 54 files changed, 2505 insertions(+), 2939 deletions(-)
 create mode 100644 CMakeLists.txt
 delete mode 100644 VERSION
 create mode 100644 cmake/FindHunspell.cmake
 create mode 100644 cmake/FindPresage.cmake
 delete mode 100644 config.pri
 delete mode 100644 doc/doc.pro
 delete mode 100644 maliit-keyboard/benchmark/benchmark.pro
 delete mode 100644 maliit-keyboard/config-plugin.pri
 delete mode 100644 maliit-keyboard/config.pri
 delete mode 100644 maliit-keyboard/data/data.pro
 delete mode 100644 maliit-keyboard/lib/lib.pro
 delete mode 100644 maliit-keyboard/lib/logic/logic.pri
 delete mode 100644 maliit-keyboard/lib/logic/state-machines/state-machines.pri
 delete mode 100644 maliit-keyboard/lib/models/models.pri
 delete mode 100644 maliit-keyboard/lib/parser/parser.pri
 delete mode 100644 maliit-keyboard/maliit-keyboard.pro
 delete mode 100644 maliit-keyboard/plugin/plugin.pro
 delete mode 100644 maliit-keyboard/qml/qml.pro
 delete mode 100644 maliit-keyboard/tests/common-check.pri
 delete mode 100644 maliit-keyboard/tests/common/common.pro
 delete mode 100644 maliit-keyboard/tests/editor/.gitignore
 delete mode 100644 maliit-keyboard/tests/editor/editor.pro
 delete mode 100644 maliit-keyboard/tests/editor/main.cpp
 delete mode 100644 maliit-keyboard/tests/editor/wordengineprobe.cpp
 delete mode 100644 maliit-keyboard/tests/editor/wordengineprobe.h
 create mode 100644 maliit-keyboard/tests/language-layout-loading/language-layout-loading.cpp
 delete mode 100644 maliit-keyboard/tests/language-layout-loading/language-layout-loading.pro
 delete mode 100644 maliit-keyboard/tests/language-layout-loading/main.cpp
 create mode 100644 maliit-keyboard/tests/language-layout-switching/language-layout-switching.cpp
 delete mode 100644 maliit-keyboard/tests/language-layout-switching/language-layout-switching.pro
 delete mode 100644 maliit-keyboard/tests/language-layout-switching/main.cpp
 delete mode 100644 maliit-keyboard/tests/preedit-string/main.cpp
 create mode 100644 maliit-keyboard/tests/preedit-string/preedit-string.cpp
 delete mode 100644 maliit-keyboard/tests/preedit-string/preedit-string.pro
 delete mode 100644 maliit-keyboard/tests/repeat-backspace/main.cpp
 create mode 100644 maliit-keyboard/tests/repeat-backspace/repeat-backspace.cpp
 delete mode 100644 maliit-keyboard/tests/repeat-backspace/repeat-backspace.pro
 delete mode 100644 maliit-keyboard/tests/tests.pro
 create mode 100644 maliit-keyboard/tests/ut_editor/.gitignore
 create mode 100644 maliit-keyboard/tests/ut_editor/ut_editor.cpp
 create mode 100644 maliit-keyboard/tests/ut_editor/wordengineprobe.cpp
 create mode 100644 maliit-keyboard/tests/ut_editor/wordengineprobe.h
 delete mode 100644 maliit-keyboard/tests/word-candidates/main.cpp
 create mode 100644 maliit-keyboard/tests/word-candidates/word-candidates.cpp
 delete mode 100644 maliit-keyboard/tests/word-candidates/word-candidates.pro
 delete mode 100644 maliit-keyboard/view/view.pri
 delete mode 100644 maliit-keyboard/view/view.pro
 delete mode 100644 maliit-keyboard/word-prediction.pri
 delete mode 100644 maliit-plugins.pro
 delete mode 100644 maliit-plugins.pro.coverage
 delete mode 100644 nemo-keyboard/nemo-keyboard.pro

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..ff5a09a
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,293 @@
+cmake_minimum_required(VERSION 3.1)
+
+project(maliit-plugins VERSION 0.99.1)
+
+option(enable-maliit-keyboard "Build the C++ reference keyboard (Maliit Keyboard)" ON)
+option(enable-nemo-keyboard "Build the QML reference keyboard (Nemo Keyboard)" ON)
+option(enable-presage "Use presage to calculate word candidates (maliit-keyboard-plugin only)" ON)
+option(enable-hunspell "Use hunspell for error correction (maliit-keyboard-plugin only)" ON)
+option(enable-preedit "Always commit characters and never use preedit (maliit-keyboard-plugin only)" ON)
+option(enable-tests "Build tests" ON)
+option(enable-docs "Build documentation" ON)
+
+set(MALIIT_DEFAULT_PROFILE "nokia-n9" CACHE STRING "Default keyboard style")
+
+if(NOT DEFINED INCLUDE_INSTALL_DIR)
+    set(INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH
+            "Installation directory for C/C++ header files [CMAKE_INSTALL_PREFIX/include]")
+endif()
+
+if(NOT DEFINED LIB_INSTALL_DIR)
+    set(LIB_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH
+            "Installation directory for object code libraries [CMAKE_INSTALL_PREFIX/lib]")
+endif()
+
+if(NOT DEFINED SHARE_INSTALL_PREFIX)
+    set(SHARE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/share" CACHE PATH
+            "Installation directory for read-only architecture-independent data [CMAKE_INSTALL_PREFIX/share]")
+endif()
+
+set(HUNSPELL_DICT_PATH "/usr/share/myspell" CACHE PATH "Directory containing hunspell dictionary files")
+set(MALIIT_PLUGINS_DATA_DIR "${SHARE_INSTALL_PREFIX}/maliit/plugins" CACHE PATH "Directory containing maliit-plugins data")
+set(MALIIT_KEYBOARD_DATA_DIR "${MALIIT_PLUGINS_DATA_DIR}/org/maliit" CACHE PATH "Directory containing maliit-keyboard data")
+
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
+
+set(CMAKE_INCLUDE_CURRENT_DIR ON)
+set(CMAKE_AUTOMOC ON)
+
+find_package(MaliitPlugins 0.99.1 REQUIRED)
+
+if(enable-maliit-keyboard)
+    set(MALIIT_KEYBOARD_SOURCES
+            maliit-keyboard/lib/logic/state-machines/abstractstatemachine.cpp
+            maliit-keyboard/lib/logic/state-machines/abstractstatemachine.h
+            maliit-keyboard/lib/logic/state-machines/deadkeymachine.cpp
+            maliit-keyboard/lib/logic/state-machines/deadkeymachine.h
+            maliit-keyboard/lib/logic/state-machines/shiftmachine.cpp
+            maliit-keyboard/lib/logic/state-machines/shiftmachine.h
+            maliit-keyboard/lib/logic/state-machines/viewmachine.cpp
+            maliit-keyboard/lib/logic/state-machines/viewmachine.h
+            maliit-keyboard/lib/logic/abstractlanguagefeatures.cpp
+            maliit-keyboard/lib/logic/abstractlanguagefeatures.h
+            maliit-keyboard/lib/logic/abstracttexteditor.cpp
+            maliit-keyboard/lib/logic/abstracttexteditor.h
+            maliit-keyboard/lib/logic/abstractwordengine.cpp
+            maliit-keyboard/lib/logic/abstractwordengine.h
+            maliit-keyboard/lib/logic/eventhandler.cpp
+            maliit-keyboard/lib/logic/eventhandler.h
+            maliit-keyboard/lib/logic/hitlogic.cpp
+            maliit-keyboard/lib/logic/hitlogic.h
+            maliit-keyboard/lib/logic/keyareaconverter.cpp
+            maliit-keyboard/lib/logic/keyareaconverter.h
+            maliit-keyboard/lib/logic/keyboardloader.cpp
+            maliit-keyboard/lib/logic/keyboardloader.h
+            maliit-keyboard/lib/logic/languagefeatures.cpp
+            maliit-keyboard/lib/logic/languagefeatures.h
+            maliit-keyboard/lib/logic/layouthelper.cpp
+            maliit-keyboard/lib/logic/layouthelper.h
+            maliit-keyboard/lib/logic/layoutupdater.cpp
+            maliit-keyboard/lib/logic/layoutupdater.h
+            maliit-keyboard/lib/logic/spellchecker.cpp
+            maliit-keyboard/lib/logic/spellchecker.h
+            maliit-keyboard/lib/logic/style.cpp
+            maliit-keyboard/lib/logic/style.h
+            maliit-keyboard/lib/logic/wordengine.cpp
+            maliit-keyboard/lib/logic/wordengine.h
+            maliit-keyboard/lib/models/area.cpp
+            maliit-keyboard/lib/models/area.h
+            maliit-keyboard/lib/models/font.cpp
+            maliit-keyboard/lib/models/font.h
+            maliit-keyboard/lib/models/key.cpp
+            maliit-keyboard/lib/models/key.h
+            maliit-keyboard/lib/models/keyarea.cpp
+            maliit-keyboard/lib/models/keyarea.h
+            maliit-keyboard/lib/models/keyboard.h
+            maliit-keyboard/lib/models/keydescription.h
+            maliit-keyboard/lib/models/label.cpp
+            maliit-keyboard/lib/models/label.h
+            maliit-keyboard/lib/models/layout.cpp
+            maliit-keyboard/lib/models/layout.h
+            maliit-keyboard/lib/models/styleattributes.cpp
+            maliit-keyboard/lib/models/styleattributes.h
+            maliit-keyboard/lib/models/text.cpp
+            maliit-keyboard/lib/models/text.h
+            maliit-keyboard/lib/models/wordcandidate.cpp
+            maliit-keyboard/lib/models/wordcandidate.h
+            maliit-keyboard/lib/models/wordribbon.cpp
+            maliit-keyboard/lib/models/wordribbon.h
+            maliit-keyboard/lib/parser/alltagtypes.h
+            maliit-keyboard/lib/parser/layoutparser.cpp
+            maliit-keyboard/lib/parser/layoutparser.h
+            maliit-keyboard/lib/parser/tagbinding.cpp
+            maliit-keyboard/lib/parser/tagbinding.h
+            maliit-keyboard/lib/parser/tagbindingcontainer.cpp
+            maliit-keyboard/lib/parser/tagbindingcontainer.h
+            maliit-keyboard/lib/parser/tagextended.cpp
+            maliit-keyboard/lib/parser/tagextended.h
+            maliit-keyboard/lib/parser/tagkey.cpp
+            maliit-keyboard/lib/parser/tagkey.h
+            maliit-keyboard/lib/parser/tagkeyboard.cpp
+            maliit-keyboard/lib/parser/tagkeyboard.h
+            maliit-keyboard/lib/parser/taglayout.cpp
+            maliit-keyboard/lib/parser/taglayout.h
+            maliit-keyboard/lib/parser/tagmodifiers.cpp
+            maliit-keyboard/lib/parser/tagmodifiers.h
+            maliit-keyboard/lib/parser/tagrow.cpp
+            maliit-keyboard/lib/parser/tagrow.h
+            maliit-keyboard/lib/parser/tagrowcontainer.cpp
+            maliit-keyboard/lib/parser/tagrowcontainer.h
+            maliit-keyboard/lib/parser/tagrowelement.cpp
+            maliit-keyboard/lib/parser/tagrowelement.h
+            maliit-keyboard/lib/parser/tagsection.cpp
+            maliit-keyboard/lib/parser/tagsection.h
+            maliit-keyboard/lib/parser/tagspacer.cpp
+            maliit-keyboard/lib/parser/tagspacer.h
+            maliit-keyboard/lib/coreutils.cpp
+            maliit-keyboard/lib/coreutils.h)
+
+    set(maliit-keyboard-libraries Qt5::Core)
+    set(maliit-keyboard-definitions HUNSPELL_DICT_PATH="${HUNSPELL_DICT_PATH}"
+            MALIIT_PLUGINS_DATA_DIR="${MALIIT_PLUGINS_DATA_DIR}"
+            MALIIT_KEYBOARD_DATA_DIR="${MALIIT_KEYBOARD_DATA_DIR}")
+    set(maliit-keyboard-include-dirs)
+
+    if(enable-presage)
+        find_package(Presage REQUIRED)
+        if(PRESAGE_FOUND)
+            list(APPEND maliit-keyboard-definitions HAVE_PRESAGE)
+            list(APPEND maliit-keyboard-libraries ${PRESAGE_LIBRARIES})
+            list(APPEND maliit-keyboard-include-dirs ${PRESAGE_INCLUDE_DIRS})
+        endif()
+    endif()
+
+    if(enable-hunspell)
+        find_package(Hunspell REQUIRED)
+        list(APPEND maliit-keyboard-definitions HAVE_HUNSPELL)
+        list(APPEND maliit-keyboard-libraries ${HUNSPELL_LIBRARIES})
+        list(APPEND maliit-keyboard-include-dirs ${HUNSPELL_INCLUDE_DIRS})
+    endif()
+
+    if(NOT enable-preedit)
+        list(APPEND maliit-keyboard-definitions DISABLE_PREEDIT)
+    endif()
+
+    add_library(maliit-keyboard STATIC ${MALIIT_KEYBOARD_SOURCES})
+    target_link_libraries(maliit-keyboard ${maliit-keyboard-libraries})
+    target_include_directories(maliit-keyboard PUBLIC maliit-keyboard/lib)
+    target_include_directories(maliit-keyboard PRIVATE ${maliit-keyboard-include-dirs})
+    target_compile_definitions(maliit-keyboard PRIVATE ${maliit-keyboard-definitions})
+
+    set(MALIIT_KEYBOARD_VIEW_SOURCES
+            maliit-keyboard/view/abstractfeedback.cpp
+            maliit-keyboard/view/abstractfeedback.h
+            maliit-keyboard/view/nullfeedback.cpp
+            maliit-keyboard/view/nullfeedback.h
+            maliit-keyboard/view/soundfeedback.cpp
+            maliit-keyboard/view/soundfeedback.h)
+
+    add_library(maliit-keyboard-view STATIC ${MALIIT_KEYBOARD_VIEW_SOURCES})
+    target_link_libraries(maliit-keyboard-view Maliit::Plugins maliit-keyboard)
+
+    set(MALIIT_KEYBOARD_EDITOR_SOURCES
+            maliit-keyboard/plugin/editor.cpp
+            maliit-keyboard/plugin/editor.h
+            maliit-keyboard/plugin/updatenotifier.cpp
+            maliit-keyboard/plugin/updatenotifier.h)
+
+    add_library(maliit-keyboard-editor STATIC ${MALIIT_KEYBOARD_EDITOR_SOURCES})
+    target_link_libraries(maliit-keyboard-editor Maliit::Plugins maliit-keyboard)
+
+    set(MALIIT_KEYBOARD_PLUGIN_SOURCES
+            maliit-keyboard/plugin/inputmethod.cpp
+            maliit-keyboard/plugin/inputmethod.h
+            maliit-keyboard/plugin/maliitcontext.cpp
+            maliit-keyboard/plugin/maliitcontext.h
+            maliit-keyboard/plugin/plugin.cpp
+            maliit-keyboard/plugin/plugin.h)
+
+    add_library(maliit-keyboard-plugin MODULE ${MALIIT_KEYBOARD_PLUGIN_SOURCES})
+    target_link_libraries(maliit-keyboard-plugin Maliit::Plugins maliit-keyboard maliit-keyboard-view maliit-keyboard-editor)
+    target_include_directories(maliit-keyboard-plugin PRIVATE maliit-keyboard)
+    target_compile_definitions(maliit-keyboard-plugin PRIVATE
+            MALIIT_PLUGINS_DATA_DIR="${MALIIT_PLUGINS_DATA_DIR}"
+            MALIIT_KEYBOARD_DATA_DIR="${MALIIT_KEYBOARD_DATA_DIR}"
+            MALIIT_DEFAULT_PROFILE="${MALIIT_DEFAULT_PROFILE}")
+
+    add_executable(maliit-keyboard-benchmark maliit-keyboard/benchmark/main.cpp)
+    target_link_libraries(maliit-keyboard-benchmark maliit-keyboard)
+endif()
+
+if(enable-docs)
+    find_package(Doxygen REQUIRED)
+
+    configure_file(doc/doxyfile.conf.in Doxyfile @ONLY)
+
+    add_custom_target(doc ALL
+            ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
+            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+            COMMENT "Generating API documentation with Doxygen" VERBATIM)
+endif()
+
+# Installation
+
+install(FILES LICENSE NEWS README
+        DESTINATION ${SHARE_INSTALL_PREFIX}/doc/maliit-plugins)
+
+if(enable-maliit-keyboard)
+    install(TARGETS maliit-keyboard-benchmark maliit-keyboard-plugin
+            RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
+            LIBRARY DESTINATION ${LIB_INSTALL_DIR}/maliit/plugins)
+    install(DIRECTORY maliit-keyboard/data/languages
+            DESTINATION ${MALIIT_PLUGINS_DATA_DIR})
+    install(DIRECTORY maliit-keyboard/data/styles
+            DESTINATION ${MALIIT_KEYBOARD_DATA_DIR})
+    install(FILES maliit-keyboard/qml/Keyboard.qml maliit-keyboard/qml/maliit-keyboard.qml
+                  maliit-keyboard/qml/maliit-keyboard-extended.qml maliit-keyboard/qml/maliit-magnifier.qml
+            DESTINATION ${MALIIT_KEYBOARD_DATA_DIR})
+endif()
+
+if(enable-nemo-keyboard)
+    install(FILES nemo-keyboard/nemo-keyboard.qml
+            DESTINATION ${LIB_INSTALL_DIR}/maliit/plugins)
+    install(DIRECTORY nemo-keyboard/org
+            DESTINATION ${MALIIT_PLUGINS_DATA_DIR})
+endif()
+
+if(enable-docs)
+    install(DIRECTORY ${CMAKE_BINARY_DIR}/html/
+            DESTINATION ${SHARE_INSTALL_PREFIX}/doc/maliit-plugins-doc)
+endif()
+
+if(enable-tests)
+    enable_testing()
+
+    find_package(Qt5Test)
+
+    add_library(test-utils STATIC
+            maliit-keyboard/tests/common/inputmethodhostprobe.cpp
+            maliit-keyboard/tests/common/inputmethodhostprobe.h
+            maliit-keyboard/tests/common/utils-gui.cpp
+            maliit-keyboard/tests/common/utils.cpp
+            maliit-keyboard/tests/common/utils.h)
+
+    target_link_libraries(test-utils PUBLIC Qt5::Core Qt5::Gui Qt5::Test maliit-keyboard-editor)
+    target_include_directories(test-utils INTERFACE maliit-keyboard/tests/common maliit-keyboard/tests maliit-keyboard)
+
+    function(create_test name)
+        set(_extra_sources ${ARGV})
+        list(REMOVE_AT _extra_sources 0)
+
+        add_executable(${name}
+                maliit-keyboard/tests/${name}/${name}.cpp
+                ${_extra_sources})
+
+        target_link_libraries(${name} test-utils ${_libs})
+
+        add_test(${name} ${name})
+
+        set(test_targets ${test_targets} ${name} PARENT_SCOPE)
+    endfunction()
+
+    create_test(language-layout-loading)
+    target_compile_definitions(language-layout-loading PRIVATE
+            -DTEST_DATADIR="${CMAKE_SOURCE_DIR}/maliit-keyboard/tests/language-layout-loading"
+            -DTEST_MALIIT_KEYBOARD_DATADIR="${CMAKE_SOURCE_DIR}/maliit-keyboard/tests/language-layout-loading")
+    create_test(language-layout-switching
+            maliit-keyboard/tests/ut_editor/wordengineprobe.cpp
+            maliit-keyboard/tests/ut_editor/wordengineprobe.h)
+    create_test(repeat-backspace)
+    create_test(ut_editor
+            maliit-keyboard/tests/ut_editor/wordengineprobe.cpp
+            maliit-keyboard/tests/ut_editor/wordengineprobe.h)
+    create_test(preedit-string
+            maliit-keyboard/tests/preedit-string/wordengineprobe.cpp
+            maliit-keyboard/tests/preedit-string/wordengineprobe.h)
+    create_test(word-candidates
+            maliit-keyboard/tests/word-candidates/wordengineprobe.cpp
+            maliit-keyboard/tests/word-candidates/wordengineprobe.h)
+
+    set_property(TEST ${test_targets} PROPERTY ENVIRONMENT
+            MALIIT_PLUGINS_DATADIR=${CMAKE_SOURCE_DIR}/maliit-keyboard/data)
+
+endif()
\ No newline at end of file
diff --git a/VERSION b/VERSION
deleted file mode 100644
index 626c498..0000000
--- a/VERSION
+++ /dev/null
@@ -1 +0,0 @@
-0.99.1
diff --git a/cmake/FindHunspell.cmake b/cmake/FindHunspell.cmake
new file mode 100644
index 0000000..b9ee3b3
--- /dev/null
+++ b/cmake/FindHunspell.cmake
@@ -0,0 +1,15 @@
+include(FeatureSummary)
+set_package_properties(HUNSPELL PROPERTIES
+        URL "http://hunspell.sourceforge.net/"
+        DESCRIPTION "Hunspell is a spell checker library.")
+
+
+find_package(PkgConfig)
+pkg_check_modules(PC_HUNSPELL QUIET hunspell)
+
+find_library(HUNSPELL_LIBRARIES NAMES hunspell ${PC_HUNSPELL_LIBRARIES} HINTS ${PC_HUNSPELL_LIBRARY_DIRS})
+find_path(HUNSPELL_INCLUDE_DIRS hunspell/hunspell.hxx HINTS ${PC_HUNSPELL_INCLUDE_DIRS})
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(HUNSPELL DEFAULT_MSG HUNSPELL_LIBRARIES HUNSPELL_INCLUDE_DIRS)
+mark_as_advanced(HUNSPELL_INCLUDE_DIRS HUNSPELL_LIBRARIES)
\ No newline at end of file
diff --git a/cmake/FindPresage.cmake b/cmake/FindPresage.cmake
new file mode 100644
index 0000000..882753e
--- /dev/null
+++ b/cmake/FindPresage.cmake
@@ -0,0 +1,11 @@
+include(FeatureSummary)
+set_package_properties(PRESAGE PROPERTIES
+        URL "http://presage.sourceforge.net/"
+        DESCRIPTION "Presage is an intelligent predictive text entry platform.")
+
+find_library(PRESAGE_LIBRARIES presage)
+find_path(PRESAGE_INCLUDE_DIRS presage.h)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(PRESAGE DEFAULT_MSG PRESAGE_LIBRARIES PRESAGE_INCLUDE_DIRS)
+mark_as_advanced(PRESAGE_INCLUDE_DIRS PRESAGE_LIBRARIES)
diff --git a/config.pri b/config.pri
deleted file mode 100644
index 61b2e9e..0000000
--- a/config.pri
+++ /dev/null
@@ -1,52 +0,0 @@
-# Linker optimization for release build
-QMAKE_LFLAGS_RELEASE+=-Wl,--as-needed
-# Compiler warnings are error if the build type is debug.
-# Except when we pass a CONFIG+=no-werror as a workaround for QTBUG-18092
-no-werror {
-    QMAKE_CXXFLAGS_DEBUG+=-O0
-} else {
-    QMAKE_CXXFLAGS_DEBUG+=-Werror -O0
-}
-
-CONFIG += no_keywords
-
-# The feature maliit-defines initializes some variables related for MALIIT, such as installation paths
-# here have to load it early, to start using the defines immediately
-!load(maliit-defines) {
-   error(Cannot find $$[QT_INSTALL_DATA]/mkspecs/features/maliit-defines.prf. Probably Maliit framework not installed)
-}
-# This enables the maliit library for C++ code
-CONFIG += maliit-plugins
-
-isEmpty(PREFIX) {
-   PREFIX = $$MALIIT_PREFIX
-}
-
-isEmpty(LIBDIR) {
-   LIBDIR = $$PREFIX/lib
-}
-
-isEmpty(MALIIT_DEFAULT_PROFILE) {
-    MALIIT_DEFAULT_PROFILE = nokia-n9
-}
-
-isEmpty(HUNSPELL_DICT_PATH) {
-    HUNSPELL_DICT_PATH = $$PREFIX/share/hunspell
-}
-
-contains(QT_CONFIG, embedded) {
-    CONFIG += qws
-}
-
-INSTALL_BIN = $$PREFIX/bin
-INSTALL_LIBS = $$LIBDIR
-INSTALL_HEADERS = $$PREFIX/include
-INSTALL_DOCS = $$PREFIX/share/doc
-
-enable-opengl {
-    QT += opengl
-    DEFINES += MALIIT_KEYBOARD_HAVE_OPENGL
-}
-
-MALIIT_PACKAGENAME = maliit-plugins
-MALIIT_VERSION = $$system(cat $$PWD/VERSION)
diff --git a/doc/doc.pro b/doc/doc.pro
deleted file mode 100644
index 46d643e..0000000
--- a/doc/doc.pro
+++ /dev/null
@@ -1,24 +0,0 @@
-include(../config.pri)
-
-TEMPLATE = lib
-CONFIG += plugin
-TARGET = dummy
-
-DOXYFILE = doxyfile.conf.in
-
-doc.name = doc
-doc.CONFIG += target_predeps no_link
-doc.output = html/index.html
-doc.clean_commands = rm -rf html
-doc.clean = ${QMAKE_FILE_IN_BASE}
-doc.input = DOXYFILE
-doc.commands += sed -e \"s;@VERSION@;$${MALIIT_VERSION};g\" -e \"s;@PWD@;$${PWD};g\" ${QMAKE_FILE_IN} > $${OUT_PWD}/${QMAKE_FILE_IN_BASE} &&
-doc.commands += doxygen $${OUT_PWD}/${QMAKE_FILE_IN_BASE}
-QMAKE_EXTRA_COMPILERS += doc
-
-htmldocs.files = html
-htmldocs.path = $$INSTALL_DOCS/$$MALIIT_PACKAGENAME
-htmldocs.CONFIG += no_check_exist directory
-INSTALLS += htmldocs
-
-OTHER_FILES += $$DOXYFILE
diff --git a/doc/doxyfile.conf.in b/doc/doxyfile.conf.in
index 75a473b..c7ea8db 100644
--- a/doc/doxyfile.conf.in
+++ b/doc/doxyfile.conf.in
@@ -1,7 +1,7 @@
 DOXYFILE_ENCODING      = UTF-8
 
 PROJECT_NAME           = "Maliit Plugins"
-PROJECT_NUMBER         = @VERSION@
+PROJECT_NUMBER         = @PROJECT_VERSION@
 PROJECT_BRIEF          =
 PROJECT_LOGO           =
 
@@ -17,7 +17,7 @@ ALWAYS_DETAILED_SEC    = NO
 INLINE_INHERITED_MEMB  = NO
 
 FULL_PATH_NAMES        = YES
-STRIP_FROM_PATH        = @IN_PWD@/..
+STRIP_FROM_PATH        = @CMAKE_SOURCE_DIR@
 STRIP_FROM_INC_PATH    =
 SHORT_NAMES            = NO
 
@@ -113,7 +113,7 @@ WARN_NO_PARAMDOC       = NO
 WARN_FORMAT            = "$file:$line: $text"
 WARN_LOGFILE           = doxygen_warnings.log
 
-INPUT                  = @IN_PWD@/../maliit-keyboard
+INPUT                  = @CMAKE_SOURCE_DIR@/maliit-keyboard
 INPUT_ENCODING         = UTF-8
 FILE_PATTERNS          =
 RECURSIVE              = YES
diff --git a/maliit-keyboard/benchmark/benchmark.pro b/maliit-keyboard/benchmark/benchmark.pro
deleted file mode 100644
index f5db95b..0000000
--- a/maliit-keyboard/benchmark/benchmark.pro
+++ /dev/null
@@ -1,16 +0,0 @@
-include(../config.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../..
-TEMPLATE = app
-TARGET = maliit-keyboard-benchmark
-target.path = $$INSTALL_BIN
-
-INCLUDEPATH += ../lib
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-SOURCES += main.cpp
-
-QT = core
-INSTALLS += target
-
-include(../word-prediction.pri)
diff --git a/maliit-keyboard/config-plugin.pri b/maliit-keyboard/config-plugin.pri
deleted file mode 100644
index 4f2effc..0000000
--- a/maliit-keyboard/config-plugin.pri
+++ /dev/null
@@ -1,2 +0,0 @@
-# This enables the maliit library for C++ code
-CONFIG += maliit-plugins
diff --git a/maliit-keyboard/config.pri b/maliit-keyboard/config.pri
deleted file mode 100644
index c5266b9..0000000
--- a/maliit-keyboard/config.pri
+++ /dev/null
@@ -1,44 +0,0 @@
-include(../config.pri)
-
-MALIIT_KEYBOARD_DATA_DIR = "$${MALIIT_PLUGINS_DATA_DIR}/org/maliit"
-
-DEFINES += MALIIT_PLUGINS_DATA_DIR=\\\"$${MALIIT_PLUGINS_DATA_DIR}\\\"
-DEFINES += MALIIT_KEYBOARD_DATA_DIR=\\\"$${MALIIT_KEYBOARD_DATA_DIR}\\\"
-
-unix {
-    MALIIT_STATIC_PREFIX=lib
-    MALIIT_STATIC_SUFFIX=.a
-    MALIIT_DYNAMIC_PREFIX=lib
-    MALIIT_DYNAMIC_SUFFIX=.so
-}
-
-win32 {
-    # qmake puts libraries in subfolders on Windows
-    release {
-        MALIIT_STATIC_PREFIX=release/lib
-        MALIIT_DYNAMIC_PREFIX=release/
-    }
-    debug {
-        MALIIT_STATIC_PREFIX=debug/lib
-        MALIIT_DYNAMIC_PREFIX=debug/
-    }
-
-    MALIIT_STATIC_SUFFIX=.a
-    MALIIT_DYNAMIC_SUFFIX=.dll
-}
-
-defineReplace(maliitStaticLib) {
-    return($${MALIIT_STATIC_PREFIX}$${1}$${MALIIT_STATIC_SUFFIX})
-}
-
-defineReplace(maliitDynamicLib) {
-    return($${MALIIT_DYNAMIC_PREFIX}$${1}$${MALIIT_DYNAMIC_SUFFIX})
-}
-
-MALIIT_KEYBOARD_TARGET = maliit-keyboard
-MALIIT_KEYBOARD_VIEW_TARGET = maliit-keyboard-view
-MALIIT_KEYBOARD_PLUGIN_TARGET = maliit-keyboard-plugin
-
-MALIIT_KEYBOARD_LIB = maliit-keyboard/lib/$$maliitStaticLib($${MALIIT_KEYBOARD_TARGET})
-MALIIT_KEYBOARD_VIEW_LIB = maliit-keyboard/view/$$maliitStaticLib($${MALIIT_KEYBOARD_VIEW_TARGET})
-MALIIT_KEYBOARD_PLUGIN_LIB = maliit-keyboard/plugin/$$maliitDynamicLib($${MALIIT_KEYBOARD_PLUGIN_TARGET})
diff --git a/maliit-keyboard/data/data.pro b/maliit-keyboard/data/data.pro
deleted file mode 100644
index a93b731..0000000
--- a/maliit-keyboard/data/data.pro
+++ /dev/null
@@ -1,20 +0,0 @@
-include(../config.pri)
-
-TARGET = dummy
-TEMPLATE = lib
-
-languages.path = $$MALIIT_PLUGINS_DATA_DIR/languages
-languages.files = languages/*.xml languages/*.dtd
-# make it available for testing, not intended for proper release though:
-languages.files += languages/debug/showcase.xml
-
-styles.path = $$MALIIT_KEYBOARD_DATA_DIR
-styles.files = styles
-
-INSTALLS += languages styles
-
-QMAKE_EXTRA_TARGETS += check
-check.target = check
-
-check.commands = \
-    xmllint --noout --dtdvalid \"$$PWD/languages/VirtualKeyboardLayout.dtd\" \"$$PWD/languages/\"*.xml
diff --git a/maliit-keyboard/lib/lib.pro b/maliit-keyboard/lib/lib.pro
deleted file mode 100644
index 3d0a579..0000000
--- a/maliit-keyboard/lib/lib.pro
+++ /dev/null
@@ -1,16 +0,0 @@
-include(../config.pri)
-
-VERSION = 0.2.0
-TARGET = $${MALIIT_KEYBOARD_TARGET}
-TEMPLATE = lib
-QT = core
-CONFIG += staticlib
-
-include(models/models.pri)
-include(logic/logic.pri)
-include(parser/parser.pri)
-
-HEADERS += coreutils.h
-SOURCES += coreutils.cpp
-
-include(../word-prediction.pri)
diff --git a/maliit-keyboard/lib/logic/logic.pri b/maliit-keyboard/lib/logic/logic.pri
deleted file mode 100644
index 74baddc..0000000
--- a/maliit-keyboard/lib/logic/logic.pri
+++ /dev/null
@@ -1,37 +0,0 @@
-LOGIC_DIR = ./logic
-
-HEADERS += \
-    logic/hitlogic.h \
-    logic/layouthelper.h \
-    logic/layoutupdater.h \
-    logic/keyboardloader.h \
-    logic/keyareaconverter.h \
-    logic/style.h \
-    logic/spellchecker.h \
-    logic/abstracttexteditor.h \
-    logic/abstractwordengine.h \
-    logic/wordengine.h \
-    logic/abstractlanguagefeatures.h \
-    logic/languagefeatures.h \
-    logic/eventhandler.h \
-
-SOURCES += \
-    logic/hitlogic.cpp \
-    logic/layouthelper.cpp \
-    logic/layoutupdater.cpp \
-    logic/keyboardloader.cpp \
-    logic/keyareaconverter.cpp \
-    logic/style.cpp \
-    logic/spellchecker.cpp \
-    logic/abstracttexteditor.cpp \
-    logic/abstractwordengine.cpp \
-    logic/wordengine.cpp \
-    logic/abstractlanguagefeatures.cpp \
-    logic/languagefeatures.cpp \
-    logic/eventhandler.cpp \
-
-DEFINES += HUNSPELL_DICT_PATH=\\\"$$HUNSPELL_DICT_PATH\\\"
-
-DEPENDPATH += $$LOGIC_DIR
-
-include(state-machines/state-machines.pri)
diff --git a/maliit-keyboard/lib/logic/state-machines/state-machines.pri b/maliit-keyboard/lib/logic/state-machines/state-machines.pri
deleted file mode 100644
index 6468a86..0000000
--- a/maliit-keyboard/lib/logic/state-machines/state-machines.pri
+++ /dev/null
@@ -1,15 +0,0 @@
-STATE_MACHINES_DIR = $$LOGIC_DIR/state-machines
-
-HEADERS += \
-    logic/state-machines/abstractstatemachine.h \
-    logic/state-machines/shiftmachine.h \
-    logic/state-machines/viewmachine.h \
-    logic/state-machines/deadkeymachine.h \
-
-SOURCES += \
-    logic/state-machines/abstractstatemachine.cpp \
-    logic/state-machines/shiftmachine.cpp \
-    logic/state-machines/viewmachine.cpp \
-    logic/state-machines/deadkeymachine.cpp \
-
-DEPENDPATH += $$STATE_MACHINES_DIR
diff --git a/maliit-keyboard/lib/models/models.pri b/maliit-keyboard/lib/models/models.pri
deleted file mode 100644
index ef475d5..0000000
--- a/maliit-keyboard/lib/models/models.pri
+++ /dev/null
@@ -1,29 +0,0 @@
-MODELS_DIR = ./models
-
-HEADERS += \
-    models/area.h \
-    models/font.h \
-    models/label.h \
-    models/key.h \
-    models/keyarea.h \
-    models/layout.h \
-    models/keyboard.h \
-    models/keydescription.h \
-    models/wordcandidate.h \
-    models/wordribbon.h \
-    models/text.h \
-    models/styleattributes.h \
-
-SOURCES += \
-    models/area.cpp \
-    models/font.cpp \
-    models/label.cpp \
-    models/key.cpp \
-    models/keyarea.cpp \
-    models/layout.cpp \
-    models/wordcandidate.cpp \
-    models/wordribbon.cpp \
-    models/text.cpp \
-    models/styleattributes.cpp \
-
-DEPENDPATH += $$MODELS_DIR
diff --git a/maliit-keyboard/lib/parser/parser.pri b/maliit-keyboard/lib/parser/parser.pri
deleted file mode 100644
index e2a1b96..0000000
--- a/maliit-keyboard/lib/parser/parser.pri
+++ /dev/null
@@ -1,34 +0,0 @@
-PARSER_DIR = ./parser
-
-HEADERS += \
-    parser/alltagtypes.h \
-    parser/layoutparser.h \
-    parser/tagbindingcontainer.h \
-    parser/tagbinding.h \
-    parser/tagextended.h \
-    parser/tagkeyboard.h \
-    parser/tagkey.h \
-    parser/taglayout.h \
-    parser/tagmodifiers.h \
-    parser/tagrowcontainer.h \
-    parser/tagrowelement.h \
-    parser/tagrow.h \
-    parser/tagsection.h \
-    parser/tagspacer.h
-
-SOURCES += \
-    parser/layoutparser.cpp \
-    parser/tagbindingcontainer.cpp \
-    parser/tagbinding.cpp \
-    parser/tagextended.cpp \
-    parser/tagkeyboard.cpp \
-    parser/tagkey.cpp \
-    parser/taglayout.cpp \
-    parser/tagmodifiers.cpp \
-    parser/tagrowcontainer.cpp \
-    parser/tagrowelement.cpp \
-    parser/tagrow.cpp \
-    parser/tagsection.cpp \
-    parser/tagspacer.cpp
-
-DEPENDPATH += $$PARSER_DIR
diff --git a/maliit-keyboard/maliit-keyboard.pro b/maliit-keyboard/maliit-keyboard.pro
deleted file mode 100644
index 30444cc..0000000
--- a/maliit-keyboard/maliit-keyboard.pro
+++ /dev/null
@@ -1,18 +0,0 @@
-CONFIG += ordered 
-TEMPLATE = subdirs
-SUBDIRS = \
-    lib \
-    view \
-    plugin \
-    data \
-    qml \
-    benchmark \
-
-
-!notests {
-    SUBDIRS += tests
-}
-
-QMAKE_EXTRA_TARGETS += check
-check.target = check
-check.CONFIG = recursive
diff --git a/maliit-keyboard/plugin/inputmethod.cpp b/maliit-keyboard/plugin/inputmethod.cpp
index 9a0e187..2b432a8 100644
--- a/maliit-keyboard/plugin/inputmethod.cpp
+++ b/maliit-keyboard/plugin/inputmethod.cpp
@@ -59,9 +59,9 @@ typedef MaliitKeyboard::NullFeedback DefaultFeedback;
 #include <maliit/plugins/abstractpluginsetting.h>
 #include <maliit/plugins/updateevent.h>
 
-#include <QApplication>
-#include <QWidget>
-#include <QDesktopWidget>
+//#include <QApplication>
+//#include <QWidget>
+//#include <QDesktopWidget>
 #include <QtQuick>
 
 class MImUpdateEvent;
diff --git a/maliit-keyboard/plugin/plugin.pro b/maliit-keyboard/plugin/plugin.pro
deleted file mode 100644
index d62c0ca..0000000
--- a/maliit-keyboard/plugin/plugin.pro
+++ /dev/null
@@ -1,39 +0,0 @@
-include(../config.pri)
-include(../config-plugin.pri)
-include(../view/view.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../..
-TARGET = $${MALIIT_KEYBOARD_PLUGIN_TARGET}
-TEMPLATE = lib
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-INCLUDEPATH += ../lib ../
-DEFINES += MALIIT_DEFAULT_PROFILE=\\\"$$MALIIT_DEFAULT_PROFILE\\\"
-
-contains(QT_MAJOR_VERSION, 4) {
-    QT = core gui
-} else {
-    QT = core gui widgets quick qml
-}
-
-CONFIG += \
-    plugin \
-
-HEADERS += \
-    plugin.h \
-    inputmethod.h \
-    editor.h \
-    updatenotifier.h \
-    maliitcontext.h \
-
-SOURCES += \
-    plugin.cpp \
-    inputmethod.cpp \
-    editor.cpp \
-    updatenotifier.cpp \
-    maliitcontext.cpp \
-
-target.path += $${MALIIT_PLUGINS_DIR}
-INSTALLS += target
-
-include(../word-prediction.pri)
diff --git a/maliit-keyboard/qml/qml.pro b/maliit-keyboard/qml/qml.pro
deleted file mode 100644
index ac2876f..0000000
--- a/maliit-keyboard/qml/qml.pro
+++ /dev/null
@@ -1,14 +0,0 @@
-include(../config.pri)
-
-TARGET = dummy
-TEMPLATE = lib
-
-qml.path = $$MALIIT_KEYBOARD_DATA_DIR
-qml.files = *.qml
-
-INSTALLS += qml
-OTHER_FILES += \
-    maliit-keyboard.qml \
-    maliit-keyboard-extended.qml \
-    maliit-magnifier.qml \
-    Keyboard.qml \
diff --git a/maliit-keyboard/tests/common-check.pri b/maliit-keyboard/tests/common-check.pri
deleted file mode 100644
index 25f4565..0000000
--- a/maliit-keyboard/tests/common-check.pri
+++ /dev/null
@@ -1,25 +0,0 @@
-QMAKE_EXTRA_TARGETS += check
-check.target = check
-
-# This enables the maliit library for C++ code
-CONFIG += maliit-plugins
-
-qws {
-    test_arguments += -qws
-}
-
-# Note that if datafiles are generated they would end out in
-# $$OUT_PWD and this would fail
-DATA_DIR = $$PWD/../data
-
-check.commands = \
-    MALIIT_PLUGINS_DATADIR=$$DATA_DIR \
-    MALIIT_KEYBOARD_DATADIR=$$DATA_DIR \
-    LD_LIBRARY_PATH=$$MALIIT_INSTALL_LIBS:$$[QT_INSTALL_LIBS]:$(LD_LIBRARY_PATH) \
-    ./$$TARGET $$test_arguments
-
-check.depends += $$TARGET
-
-LIBS += ../common/$$maliitStaticLib(tests-common)
-POST_TARGETDEPS += ../common/$$maliitStaticLib(tests-common)
-INCLUDEPATH += ../common
diff --git a/maliit-keyboard/tests/common/common.pro b/maliit-keyboard/tests/common/common.pro
deleted file mode 100644
index 62ca5ba..0000000
--- a/maliit-keyboard/tests/common/common.pro
+++ /dev/null
@@ -1,25 +0,0 @@
-include(../../config-plugin.pri)
-
-TARGET = tests-common
-TEMPLATE = lib
-CONFIG += staticlib
-
-SOURCES += \
-           utils.cpp \
-           utils-gui.cpp \
-           inputmethodhostprobe.cpp \
-
-HEADERS += \
-           utils.h \
-           inputmethodhostprobe.h \
-
-contains(QT_MAJOR_VERSION, 4) {
-    QT = core gui
-} else {
-    QT = core gui widgets
-}
-
-QMAKE_EXTRA_TARGETS += check
-check.target = check
-check.command = $$system(true)
-check.depends += libtests-common.a
diff --git a/maliit-keyboard/tests/common/utils-gui.cpp b/maliit-keyboard/tests/common/utils-gui.cpp
index f4975a5..a745eb5 100644
--- a/maliit-keyboard/tests/common/utils-gui.cpp
+++ b/maliit-keyboard/tests/common/utils-gui.cpp
@@ -33,9 +33,6 @@
 
 #include <QtCore>
 
-#include <QApplication>
-#include <QCommonStyle>
-
 namespace TestUtils {
 
 } // namespace TestUtils
diff --git a/maliit-keyboard/tests/editor/.gitignore b/maliit-keyboard/tests/editor/.gitignore
deleted file mode 100644
index 85042ac..0000000
--- a/maliit-keyboard/tests/editor/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-editor
diff --git a/maliit-keyboard/tests/editor/editor.pro b/maliit-keyboard/tests/editor/editor.pro
deleted file mode 100644
index f62b7d0..0000000
--- a/maliit-keyboard/tests/editor/editor.pro
+++ /dev/null
@@ -1,19 +0,0 @@
-include(../../config.pri)
-include(../common-check.pri)
-include(../../config-plugin.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../../..
-TARGET = editor
-TEMPLATE = app
-QT = core testlib gui
-
-INCLUDEPATH += ../ ../../lib ../../
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-HEADERS += \
-    wordengineprobe.h \
-
-SOURCES += \
-    wordengineprobe.cpp \
-    main.cpp \
diff --git a/maliit-keyboard/tests/editor/main.cpp b/maliit-keyboard/tests/editor/main.cpp
deleted file mode 100644
index b202b37..0000000
--- a/maliit-keyboard/tests/editor/main.cpp
+++ /dev/null
@@ -1,210 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: maliit-discuss@lists.maliit.org
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include "utils.h"
-#include "wordengineprobe.h"
-#include "common/inputmethodhostprobe.h"
-
-#include "plugin/editor.h"
-#include "models/key.h"
-#include "models/text.h"
-#include "logic/languagefeatures.h"
-#include "logic/layouthelper.h"
-#include "logic/layoutupdater.h"
-#include "logic/style.h"
-
-#include <QtCore>
-#include <QtTest>
-
-using namespace MaliitKeyboard;
-
-Q_DECLARE_METATYPE(WordCandidateList)
-
-namespace {
-    void initializeWordEngine(Logic::WordEngineProbe *word_engine)
-    {
-        word_engine->addSpellingCandidate(QString("He"), QString("Hello"));
-        word_engine->addSpellingCandidate(QString("Hel"), QString("Hello"));
-        word_engine->addSpellingCandidate(QString("Helo"), QString("Hello"));
-        word_engine->addSpellingCandidate(QString("Helol"), QString("Hello"));
-        word_engine->addSpellingCandidate(QString("Hello"), QString("Hello"));
-        word_engine->addSpellingCandidate(QString("Wo"), QString("World"));
-        word_engine->addSpellingCandidate(QString("Wor"), QString("World"));
-        word_engine->addSpellingCandidate(QString("Word"), QString("World"));
-        word_engine->addSpellingCandidate(QString("Wordl"), QString("World"));
-        word_engine->addSpellingCandidate(QString("World"), QString("World"));
-    }
-
-    void appendInput(Editor *editor, const QString &input)
-    {
-        Q_FOREACH(const QChar &c, input) {
-            Key key;
-            if (c.isSpace()) {
-                key.setAction(Key::ActionSpace);
-            } else {
-                key.setAction(Key::ActionInsert);
-                key.rLabel().setText(QString(c));
-            }
-            editor->onKeyPressed(key);
-            editor->onKeyReleased(key);
-        }
-    }
-
-} // namespace
-
-class TestEditor
-    : public QObject
-{
-    Q_OBJECT
-
-private:
-    Q_SLOT void initTestCase()
-    {
-        qRegisterMetaType<WordCandidateList>("WordCandidateList");
-    }
-
-    Q_SLOT void testAutoCorrect_data()
-    {
-        QTest::addColumn<bool>("enable_auto_correct");
-        QTest::addColumn<QString>("input");
-        QTest::addColumn<QString>("expected_commit_history");
-
-        QTest::newRow("auto-correct disabled")
-                << false << "Helol Wordl! " << "Helol Wordl! ";
-        QTest::newRow("auto-correct disabled, multiple punctation")
-                << false << "Helol Wordl!! " << "Helol Wordl!! ";
-        QTest::newRow("auto-correct enabled, digits")
-                << false << "Helol Wordl12 " << "Helol Wordl12 ";
-        QTest::newRow("auto-correct enabled")
-                << true << "Helol Wordl! " << "Hello World! ";
-        QTest::newRow("auto-correct enabled, multiple punctation")
-                << true << "Helol Wordl!! " << "Hello World!! ";
-    }
-
-    Q_SLOT void testAutoCorrect()
-    {
-        QFETCH(bool, enable_auto_correct);
-        QFETCH(QString, input);
-        QFETCH(QString, expected_commit_history);
-
-        Logic::WordEngineProbe *word_engine = new Logic::WordEngineProbe;
-        Editor editor(new Model::Text, word_engine, new Logic::LanguageFeatures);
-
-        InputMethodHostProbe host;
-        editor.setHost(&host);
-
-        initializeWordEngine(word_engine);
-
-        editor.wordEngine()->setEnabled(true);
-        editor.setAutoCorrectEnabled(enable_auto_correct);
-        editor.setPreeditEnabled(true);
-        editor.setAutoCapsEnabled(true);
-
-        appendInput(&editor, input);
-
-        QCOMPARE(host.commitStringHistory(), expected_commit_history);
-    }
-
-    Q_SLOT void testAutoCaps_data()
-    {
-        QTest::addColumn<bool>("enable_auto_correct");
-        QTest::addColumn<QString>("input");
-        QTest::addColumn<QString>("expected_commit_history");
-        QTest::addColumn<int>("expected_auto_caps_activated_count");
-
-        QTest::newRow("auto-correct disabled, no punctation")
-                << false << "Helol Wordl " << "Helol Wordl " << 0;
-        QTest::newRow("auto-correct enabled, no punctation")
-                << true << "Helol Wordl " << "Hello World " << 0;
-        QTest::newRow("auto-correct disabled, dot")
-                << false << "Helol Wordl. " << "Helol Wordl. " << 1;
-        QTest::newRow("auto-correct enabled, dot")
-                << true << "Helol Wordl. " << "Hello World. " << 1;
-        QTest::newRow("auto-correct disabled, excalamation mark")
-                << false << "Helol Wordl! " << "Helol Wordl! " << 1;
-        QTest::newRow("auto-correct enabled, excalamation mark")
-                << true << "Helol Wordl! " << "Hello World! " << 1;
-        QTest::newRow("auto-correct disabled, multiple dots")
-                << false << "Helol Wordl... " << "Helol Wordl... " << 1;
-        QTest::newRow("auto-correct enabled, multiple dots")
-                << true << "Helol Wordl... " << "Hello World... " << 1;
-        QTest::newRow("auto-correct disabled, comma")
-                << false << "Helol Wordl, " << "Helol Wordl, " << 0;
-        QTest::newRow("auto-correct enabled, comma")
-                << true << "Helol Wordl, " << "Hello World, " << 0;
-        QTest::newRow("auto-correct disabled, quotation mark")
-                << false << "Helol Wordl\" " << "Helol Wordl\" " << 0;
-        QTest::newRow("auto-correct enabled, quotation mark")
-                << true << "Helol Wordl\" " << "Hello World\" " << 0;
-        QTest::newRow("auto-correct disabled, multiple sentences with mixed punctation")
-                << false << "This is a \"first sentence\". And a second, one! "
-                << "This is a \"first sentence\". And a second, one! " << 2;
-        QTest::newRow("auto-correct enabled, multiple sentences with mixed punctation")
-                << true << "This is a \"first sentence\". And a second, one! "
-                << "This is a \"first sentence\". And a second, one! " << 2;
-        QTest::newRow("auto-correct disabled, multiple sentences with dots")
-                << false << "First sentence. Second one. And Third. "
-                << "First sentence. Second one. And Third. " << 3;
-        QTest::newRow("auto-correct enabled, multiple sentences with dots")
-                << true << "First sentence. Second one. And Third. "
-                << "First sentence. Second one. And Third. " << 3;
-    }
-
-    Q_SLOT void testAutoCaps()
-    {
-        QFETCH(bool, enable_auto_correct);
-        QFETCH(QString, input);
-        QFETCH(QString, expected_commit_history);
-        QFETCH(int, expected_auto_caps_activated_count);
-
-        Logic::WordEngineProbe *word_engine = new Logic::WordEngineProbe;
-        Editor editor(new Model::Text, word_engine, new Logic::LanguageFeatures);
-        QSignalSpy auto_caps_activated_spy(&editor, SIGNAL(autoCapsActivated()));
-
-        InputMethodHostProbe host;
-        editor.setHost(&host);
-
-        initializeWordEngine(word_engine);
-
-        editor.wordEngine()->setEnabled(true);
-        editor.setAutoCorrectEnabled(enable_auto_correct);
-        editor.setPreeditEnabled(true);
-        editor.setAutoCapsEnabled(true);
-
-        appendInput(&editor, input);
-
-        QCOMPARE(host.commitStringHistory(), expected_commit_history);
-        QCOMPARE(auto_caps_activated_spy.count(), expected_auto_caps_activated_count);
-    }
-};
-
-QTEST_MAIN(TestEditor)
-#include "main.moc"
diff --git a/maliit-keyboard/tests/editor/wordengineprobe.cpp b/maliit-keyboard/tests/editor/wordengineprobe.cpp
deleted file mode 100644
index c95ed86..0000000
--- a/maliit-keyboard/tests/editor/wordengineprobe.cpp
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: maliit-discuss@lists.maliit.org
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include "wordengineprobe.h"
-
-namespace MaliitKeyboard {
-namespace Logic {
-
-//! \class WordEngineProbe
-//! A word engine that deterministcally predicts word candidates, in such a
-//! way that it can be used for tests. Does not require Hunspell or Presage.
-
-
-//! \param parent The owner of this instance (optional).
-WordEngineProbe::WordEngineProbe(QObject *parent)
-    : AbstractWordEngine(parent)
-    , candidates()
-{}
-
-
-WordEngineProbe::~WordEngineProbe()
-{}
-
-void WordEngineProbe::addSpellingCandidate(const QString &text,
-                                           const QString &word)
-{
-    candidates.insert(text, word);
-}
-
-//! \brief Returns new candidates.
-//! \param text Preedit of text model is reversed and emitted as only word
-//!             candidate. Special characters (e.g., punctuation) are skipped.
-WordCandidateList WordEngineProbe::fetchCandidates(Model::Text *text)
-{
-    WordCandidateList result;
-
-    QHash<QString, QString>::const_iterator candidate = candidates.constFind(text->preedit());
-    if (candidate != candidates.constEnd()) {
-        text->setPrimaryCandidate(candidate.value());
-
-        WordCandidate word_candidate(WordCandidate::SourceSpellChecking, candidate.value());
-        result.append(word_candidate);
-    }
-
-    return result;
-}
-
-}} // namespace MaliitKeyboard
diff --git a/maliit-keyboard/tests/editor/wordengineprobe.h b/maliit-keyboard/tests/editor/wordengineprobe.h
deleted file mode 100644
index 1a0a5a3..0000000
--- a/maliit-keyboard/tests/editor/wordengineprobe.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: maliit-discuss@lists.maliit.org
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#ifndef MALIIT_KEYBOARD_WORDENGINEPROBE_H
-#define MALIIT_KEYBOARD_WORDENGINEPROBE_H
-
-#include "logic/abstractwordengine.h"
-#include <QtCore>
-
-namespace MaliitKeyboard {
-namespace Logic {
-
-class WordEngineProbe
-    : public AbstractWordEngine
-{
-    Q_OBJECT
-    Q_DISABLE_COPY(WordEngineProbe)
-
-public:
-    explicit WordEngineProbe(QObject *parent = 0);
-    virtual ~WordEngineProbe();
-
-    void addSpellingCandidate(const QString &text, const QString &word);
-
-private:
-    virtual WordCandidateList fetchCandidates(Model::Text *text);
-
-    QHash<QString, QString> candidates;
-};
-
-}} // namespace MaliitKeyboard
-
-#endif // MALIIT_KEYBOARD_WORDENGINEPROBE_H
diff --git a/maliit-keyboard/tests/language-layout-loading/language-layout-loading.cpp b/maliit-keyboard/tests/language-layout-loading/language-layout-loading.cpp
new file mode 100644
index 0000000..be162d5
--- /dev/null
+++ b/maliit-keyboard/tests/language-layout-loading/language-layout-loading.cpp
@@ -0,0 +1,625 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: maliit-discuss@lists.maliit.org
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include "utils.h"
+#include "coreutils.h"
+
+#include "models/key.h"
+#include "models/keydescription.h"
+#include "models/keyboard.h"
+#include "models/styleattributes.h"
+#include "logic/keyboardloader.h"
+#include "logic/keyareaconverter.h"
+#include "logic/style.h"
+#include "logic/layouthelper.h"
+
+#include <QtCore>
+#include <QtTest>
+#include <QDebug>
+
+using namespace MaliitKeyboard;
+
+typedef QSharedPointer<KeyboardLoader> SharedKeyboardLoader;
+
+typedef QPair<QString, QString> DictionaryValue;
+typedef QMap<QString, QString> Dictionary;
+
+typedef QPair<Key, KeyDescription> KeyDescriptionPair;
+
+Q_DECLARE_METATYPE(Dictionary)
+Q_DECLARE_METATYPE(Keyboard)
+
+namespace {
+
+SharedKeyboardLoader getLoader(const QString &id)
+{
+    SharedKeyboardLoader loader(new KeyboardLoader);
+
+    loader->setActiveId(id);
+    return loader;
+}
+
+Keyboard stringToKeyboard(const QString &str)
+{
+    enum
+    {
+        ExpectFirstSeparator,
+        ExpectKey,
+        ExpectSeparator
+    } expected_char = ExpectFirstSeparator;
+
+    Keyboard kb;
+    int row(0);
+    bool left_spacer(false);
+
+    Q_FOREACH(const QChar &c, str) {
+        switch (expected_char) {
+        case ExpectKey:
+            expected_char = ExpectSeparator;
+
+            if (c == '\n') {
+                ++row;
+            } else {
+                Label label;
+                Key key;
+                KeyDescription key_desc;
+
+                label.setText(c);
+                key.setLabel(label);
+                key_desc.row = row;
+                key_desc.left_spacer = left_spacer;
+                key_desc.right_spacer = false;
+                kb.keys.append(key);
+                kb.key_descriptions.append(key_desc);
+            }
+            left_spacer = false;
+            break;
+
+        case ExpectFirstSeparator:
+        case ExpectSeparator:
+            expected_char = ExpectKey;
+
+            switch (c.toLatin1()) {
+            case '|':
+                break;
+
+            case ' ':
+                if (not kb.key_descriptions.isEmpty()) {
+                    KeyDescription& last(kb.key_descriptions.last());
+
+                    if (last.row == row) {
+                        last.right_spacer = true;
+                    }
+                }
+                left_spacer = true;
+                break;
+
+            default:
+                qFatal("A bug in test - wrong separator (expected either | or space)");
+                break;
+            }
+            break;
+
+        default:
+            qFatal("A bug in test - wrong expected char type.");
+            break;
+        }
+    }
+
+    if (expected_char == ExpectSeparator) {
+        qFatal("A bug in test - last char should be a separator");
+    }
+
+    return kb;
+}
+
+
+Dictionary &operator<<(Dictionary &dict, const DictionaryValue &value)
+{
+    dict.insert(value.first, value.second);
+    return dict;
+}
+
+Keyboard &operator<<(Keyboard &keyboard, const KeyDescriptionPair &value)
+{
+    keyboard.keys.append(value.first);
+    keyboard.key_descriptions.append(value.second);
+    return keyboard;
+}
+
+KeyDescriptionPair createActionPair(Key::Action action = Key::ActionInsert,
+                                    KeyDescription::Icon icon_type = KeyDescription::NoIcon,
+                                    const QByteArray &icon = "")
+{
+    Key key;
+    KeyDescription desc;
+
+    key.setAction(action);
+    key.setIcon(icon);
+    desc.icon = icon_type;
+    return KeyDescriptionPair(key, desc);
+}
+
+KeyDescriptionPair createPair(const QString &text,
+                              int row,
+                              bool left_spacer,
+                              bool right_spacer)
+{
+    Label label;
+    Key key;
+    KeyDescription desc;
+
+    label.setText(text);
+    key.setLabel(label);
+    desc.row = row;
+    desc.left_spacer = left_spacer;
+    desc.right_spacer = right_spacer;
+
+    return KeyDescriptionPair(key, desc);
+}
+
+void clearKeyboard(Keyboard &kb)
+{
+    kb.keys.clear();
+    kb.key_descriptions.clear();
+    kb.style_name.clear();
+}
+
+Key getKey(const QString &text,
+           Key::Action action = Key::ActionInsert)
+{
+    Label label;
+    Key key;
+
+    label.setText(text);
+    key.setLabel(label);
+    key.setAction(action);
+
+    return key;
+}
+
+} // unnamed namespace
+
+class TestLanguageLayoutLoading
+    : public QObject
+{
+    Q_OBJECT
+
+private:
+    void compareKeyboards(const Keyboard &kb1, const Keyboard &kb2)
+    {
+        QCOMPARE(kb1.keys.size(), kb2.keys.size());
+        QCOMPARE(kb1.key_descriptions.size(), kb2.key_descriptions.size());
+        QCOMPARE(kb1.keys.size(), kb1.key_descriptions.size());
+
+        for (int iter(0); iter < kb1.keys.size(); ++iter) {
+            QCOMPARE(kb1.keys[iter].label().text(), kb2.keys[iter].label().text());
+
+            const KeyDescription& kd1(kb1.key_descriptions[iter]);
+            const KeyDescription& kd2(kb2.key_descriptions[iter]);
+
+            QCOMPARE(kd1.row, kd2.row);
+            QCOMPARE(kd1.left_spacer, kd2.left_spacer);
+            QCOMPARE(kd1.right_spacer, kd2.right_spacer);
+        }
+    }
+
+    // QCOMPARE is a macro with "return;" statement in it. So it does not quit
+    // the test immediately on failure when it is used in a function called by
+    // our test routine. So we are adding another ugly macro. Wheee...
+#define COMPARE_KEYBOARDS(gotten_keyboard, expected_keyboard) \
+    compareKeyboards(gotten_keyboard, expected_keyboard); \
+    if (QTest::currentTestFailed()) { \
+        return; \
+    }
+
+    Q_SLOT void initTestCase()
+    {
+        QVERIFY(qputenv("MALIIT_PLUGINS_DATADIR", TEST_DATADIR));
+        QVERIFY(qputenv("MALIIT_KEYBOARD_DATADIR", TEST_MALIIT_KEYBOARD_DATADIR));
+    }
+
+    Q_SLOT void testSanity_data()
+    {
+        QTest::addColumn<QString>("string_desc");
+        QTest::addColumn<Keyboard>("expected_keyboard");
+
+        Keyboard kb;
+        QTest::newRow("Empty string - empty keyboard")
+            << ""
+            << kb;
+        clearKeyboard(kb);
+
+        QTest::newRow("Complicated string")
+            << " a b \n c|d|"
+            << (kb
+                << createPair("a", 0, true, true)
+                << createPair("b", 0, true, true)
+                << createPair("c", 1, true, false)
+                << createPair("d", 1, false, false));
+        clearKeyboard(kb);
+    }
+
+    Q_SLOT void testSanity()
+    {
+        QFETCH(QString, string_desc);
+        QFETCH(Keyboard, expected_keyboard);
+
+        COMPARE_KEYBOARDS(stringToKeyboard(string_desc), expected_keyboard);
+    }
+
+    Q_SLOT void testGeneral_data()
+    {
+        QTest::addColumn<QString>("keyboard_id");
+        QTest::addColumn<QString>("expected_keyboard");
+        QTest::addColumn<QString>("expected_shifted_keyboard");
+        QTest::addColumn<QString>("expected_number_keyboard");
+        QTest::addColumn<QString>("expected_phone_number_keyboard");
+        QTest::addColumn<Dictionary>("expected_dead_keyboards");
+        QTest::addColumn<Dictionary>("expected_shifted_dead_keyboards");
+        QTest::addColumn<Dictionary>("expected_extended_keyboards");
+        QTest::addColumn<QStringList>("expected_symbols_keyboards");
+
+        Dictionary dead;
+        Dictionary sdead;
+        Dictionary ext;
+
+        QTest::newRow("General test")
+            << "general_test1"
+            << "|q|w|\n p a "
+            << "|Q|W|\n p a "
+            << "|0|1|\n 2 3 "
+            << " 9 8 \n 7|6 "
+            << (dead
+                << DictionaryValue(QString::fromUtf8("´"), "|q|e|\n p a ")
+                << DictionaryValue(";", "|q|r|\n p a ")
+                << DictionaryValue("'", "|q|t|\n p a "))
+            << (sdead
+                << DictionaryValue(QString::fromUtf8("´"), "|Q|E|\n p a ")
+                << DictionaryValue(";", "|Q|r|\n p a ")
+                << DictionaryValue("'", "|Q|T|\n p a "))
+            << (ext
+                << DictionaryValue("q", "|y|u|\n|i|o|")
+                << DictionaryValue("Q", "|Y|U|\n|I|O|"))
+            << (QStringList()
+                << "|1|\n|2|"
+                << "|3|\n|4|");
+        dead.clear();
+        sdead.clear();
+        ext.clear();
+    }
+
+    Q_SLOT void testGeneral()
+    {
+        QFETCH(QString, keyboard_id);
+        QFETCH(QString, expected_keyboard);
+        QFETCH(QString, expected_shifted_keyboard);
+        QFETCH(QString, expected_number_keyboard);
+        QFETCH(QString, expected_phone_number_keyboard);
+        QFETCH(Dictionary, expected_dead_keyboards);
+        QFETCH(Dictionary, expected_shifted_dead_keyboards);
+        QFETCH(Dictionary, expected_extended_keyboards);
+        QFETCH(QStringList, expected_symbols_keyboards);
+
+        SharedKeyboardLoader loader(getLoader(keyboard_id));
+
+        QVERIFY(loader->ids().indexOf(keyboard_id) != -1);
+        qDebug() << "Keyboard";
+        COMPARE_KEYBOARDS(loader->keyboard(), stringToKeyboard(expected_keyboard));
+        qDebug() << "Shifted eyboard";
+        COMPARE_KEYBOARDS(loader->shiftedKeyboard(), stringToKeyboard(expected_shifted_keyboard));
+        qDebug() << "Number keyboard";
+        COMPARE_KEYBOARDS(loader->numberKeyboard(), stringToKeyboard(expected_number_keyboard));
+        qDebug() << "Phonenumber keyboard";
+        COMPARE_KEYBOARDS(loader->phoneNumberKeyboard(), stringToKeyboard(expected_phone_number_keyboard));
+
+        Q_FOREACH(const QString &dead_text, expected_dead_keyboards.keys()) {
+            Key dead_key;
+            Label dead_label;
+
+            dead_label.setText(dead_text);
+            dead_key.setLabel(dead_label);
+            qDebug() << "Dead keyboard for:" << dead_text;
+            COMPARE_KEYBOARDS(loader->deadKeyboard(dead_key), stringToKeyboard(expected_dead_keyboards[dead_text]));
+        }
+
+        Q_FOREACH(const QString &dead_text, expected_shifted_dead_keyboards.keys()) {
+            Key dead_key;
+            Label dead_label;
+
+            dead_label.setText(dead_text);
+            dead_key.setLabel(dead_label);
+            qDebug() << "Shifted dead keyboard for:" << dead_text;
+            COMPARE_KEYBOARDS(loader->shiftedDeadKeyboard(dead_key), stringToKeyboard(expected_shifted_dead_keyboards[dead_text]));
+        }
+
+        for (int iter(0); iter <= expected_symbols_keyboards.size(); ++iter) {
+            int index(iter % expected_symbols_keyboards.size());
+
+            qDebug() << "Symbols keyboard, page:" << iter << "(expected page:" << index << ")";
+            COMPARE_KEYBOARDS(loader->symbolsKeyboard(iter), stringToKeyboard(expected_symbols_keyboards[index]));
+        }
+    }
+
+    Q_SLOT void testStyle_data()
+    {
+        QTest::addColumn<QString>("keyboard_id");
+        QTest::addColumn<QString>("expected_style");
+
+        QTest::newRow("No style given in xml")
+            << "style_test1"
+            << "keys4";
+
+        QTest::newRow("Style given in xml")
+            << "style_test2"
+            << "four_symbols";
+    }
+
+    Q_SLOT void testStyle()
+    {
+        QFETCH(QString, keyboard_id);
+        QFETCH(QString, expected_style);
+
+        SharedKeyboardLoader loader(getLoader(keyboard_id));
+        QCOMPARE(loader->keyboard().style_name, expected_style);
+    }
+
+    Q_SLOT void testAction_data()
+    {
+        QTest::addColumn<QString>("keyboard_id");
+        QTest::addColumn<Keyboard>("expected_keyboard");
+
+        Keyboard kb;
+
+        QTest::newRow("Implicit insert action")
+            << "action_test1"
+            << (kb
+                << createActionPair());
+        clearKeyboard(kb);
+
+        QTest::newRow("Explicit actions")
+            << "action_test2"
+            << (kb
+                << createActionPair()
+                << createActionPair(Key::ActionShift)
+                << createActionPair(Key::ActionBackspace)
+                << createActionPair(Key::ActionReturn));
+        clearKeyboard(kb);
+
+        QTest::newRow("Dead action")
+            << "action_test3"
+            << (kb
+                << createActionPair(Key::ActionDead));
+        clearKeyboard(kb);
+    }
+
+    Q_SLOT void testAction()
+    {
+        QFETCH(QString, keyboard_id);
+        QFETCH(Keyboard, expected_keyboard);
+
+        SharedKeyboardLoader loader(getLoader(keyboard_id));
+        Keyboard gotten_keyboard(loader->keyboard());
+
+        QCOMPARE(gotten_keyboard.keys.size(), expected_keyboard.keys.size());
+
+        for (int iter(0); iter < expected_keyboard.keys.size(); ++iter) {
+            const Key &gotten_key(gotten_keyboard.keys[iter]);
+            const Key &expected_key(expected_keyboard.keys[iter]);
+
+            QCOMPARE(gotten_key.action(), expected_key.action());
+        }
+    }
+
+    Q_SLOT void testIcon_data()
+    {
+        QTest::addColumn<QString>("keyboard_id");
+        QTest::addColumn<Keyboard>("expected_keyboard");
+
+        Keyboard kb;
+        QTest::newRow("Default icons")
+            << "icon_test1"
+            << (kb
+                << createActionPair(Key::ActionBackspace, KeyDescription::BackspaceIcon)
+                << createActionPair(Key::ActionReturn, KeyDescription::ReturnIcon)
+                << createActionPair(Key::ActionShift, KeyDescription::ShiftIcon)
+                << createActionPair(Key::ActionClose, KeyDescription::CloseIcon));
+        clearKeyboard(kb);
+
+        QTest::newRow("Custom or empty icons")
+            << "icon_test2"
+            << (kb
+                << createActionPair()
+                << createActionPair(Key::ActionInsert, KeyDescription::CustomIcon, "overriden_icon"));
+        clearKeyboard(kb);
+
+        /* TODO: Commented out for now, as it is not not possible to override
+           icons for some action keys and I don't know if we want to allow
+           this. I would say that we indeed do want.
+
+        QTest::newRow("Overriden icons")
+            << "icon_test3"
+            << (kb
+                << actionPair(Key::ActionClose, KeyDescription::CustomIcon, "overriden_icon"));
+        clearKeyboard(kb);
+        */
+    }
+
+    Q_SLOT void testIcon()
+    {
+        QFETCH(QString, keyboard_id);
+        QFETCH(Keyboard, expected_keyboard);
+
+        SharedKeyboardLoader loader(getLoader(keyboard_id));
+        Keyboard gotten_keyboard(loader->keyboard());
+
+        QCOMPARE(gotten_keyboard.keys.size(), expected_keyboard.keys.size());
+
+        for (int iter(0); iter < expected_keyboard.keys.size(); ++iter) {
+            const Key& gotten_key(gotten_keyboard.keys[iter]);
+            const Key& expected_key(expected_keyboard.keys[iter]);
+            const KeyDescription& gotten_desc(gotten_keyboard.key_descriptions[iter]);
+            const KeyDescription& expected_desc(expected_keyboard.key_descriptions[iter]);
+
+            QCOMPARE(gotten_key.action(), expected_key.action());
+            QCOMPARE(gotten_desc.icon, expected_desc.icon);
+            QCOMPARE(gotten_key.icon(), expected_key.icon());
+        }
+    }
+
+    Q_SLOT void testExtended_data()
+    {
+        QTest::addColumn<QString>("keyboard_id");
+        QTest::addColumn<Key>("pressed_key");
+        QTest::addColumn<QString>("expected_keyboard");
+
+        // TODO: we should get rid of this prepending stuff and fix the language
+        // layouts.
+        /*
+        QTest::newRow("Extended keyboard for unshifted key (also notice prepending)")
+            << "extended_test"
+            << getKey("a")
+            << "|a|b|c|";
+        */
+
+        QTest::newRow("Extended keyboard for shifted key (also notice prepending)")
+            << "extended_test"
+            << getKey("A")
+            << "|A|B|C|";
+
+        QTest::newRow("Ignore spacers in extended keyboard")
+            << "extended_test"
+            << getKey("d")
+            << "|d|e|f|";
+
+        QTest::newRow("Extended keyboard with multiple rows (also notice lack of prepending)")
+            << "extended_test"
+            << getKey("g")
+            << "|h|i|\n|j|k|";
+
+        QTest::newRow("Extended keyboard for empty label (also notice lack of prepending the key with empty label)")
+            << "extended_test"
+            << getKey("")
+            << "|x|";
+
+        QTest::newRow("No extended keyboard for spacebars.")
+            << "extended_test"
+            << getKey("", Key::ActionSpace)
+            << "";
+
+        QTest::newRow("No non-action-insert prepending")
+            << "extended_test"
+            << getKey("close", Key::ActionClose)
+            << "|X|";
+    }
+
+    Q_SLOT void testExtended()
+    {
+        QFETCH(QString, keyboard_id);
+        QFETCH(Key, pressed_key);
+        QFETCH(QString, expected_keyboard);
+
+        SharedKeyboardLoader loader(getLoader(keyboard_id));
+
+        COMPARE_KEYBOARDS(loader->extendedKeyboard(pressed_key), stringToKeyboard(expected_keyboard));
+    }
+
+    Q_SLOT void testStylingProfile()
+    {
+        const Logic::LayoutHelper::Orientation orientation(Logic::LayoutHelper::Landscape);
+        Style style;
+        QCOMPARE(style.availableProfiles().size(), 1);
+        QCOMPARE(style.availableProfiles().first(), QString("test-profile"));
+        QCOMPARE(style.profile(), QString());
+        QCOMPARE(style.attributes()->fontSize(orientation), 0.0);
+        QCOMPARE(style.extendedKeysAttributes()->fontSize(orientation), 0.0);
+        QCOMPARE(style.directory(Style::Images), QString());
+        QCOMPARE(style.directory(Style::Fonts), QString());
+        QCOMPARE(style.directory(Style::Sounds), QString());
+
+        QSignalSpy profile_changed_spy(&style, SIGNAL(profileChanged()));
+        style.setProfile("test-profile");
+        QCOMPARE(profile_changed_spy.count(), 1);
+        QCOMPARE(style.profile(), QString("test-profile"));
+        QCOMPARE(style.attributes()->fontSize(orientation), 10.0);
+        QCOMPARE(style.extendedKeysAttributes()->fontSize(orientation), 0.0);
+
+        const QString test_profile_dir(QString::fromLatin1(TEST_MALIIT_KEYBOARD_DATADIR)
+                                       + "/styles/test-profile");
+        QCOMPARE(style.directory(Style::Images), test_profile_dir + "/images");
+        QCOMPARE(style.directory(Style::Fonts), test_profile_dir + "/fonts");
+        QCOMPARE(style.directory(Style::Sounds), test_profile_dir + "/sounds");
+    }
+
+    Q_SLOT void testKeyGeometryStyling_data()
+    {
+        QTest::addColumn<int>("key_index");
+        QTest::addColumn<QString>("expected_label");
+        QTest::addColumn<int>("expected_left_distance");
+        QTest::addColumn<int>("expected_right_distance");
+        QTest::addColumn<int>("expected_left_edge");
+        QTest::addColumn<int>("expected_right_edge");
+
+        QTest::newRow("1st row: ' a|b ', testing geometry of 'a'.")
+            << 0 << QString("a") << 25 << 5 << 0 << 50;
+
+        QTest::newRow("1st row: ' a|b ', testing geometry of 'b'.")
+            << 1 << QString("b") << 5 << 25 << 50 << 100;
+    }
+
+    Q_SLOT void testKeyGeometryStyling()
+    {
+        QFETCH(int, key_index);
+        QFETCH(QString, expected_label);
+        QFETCH(int, expected_left_distance);
+        QFETCH(int, expected_right_distance);
+        QFETCH(int, expected_left_edge);
+        QFETCH(int, expected_right_edge);
+
+        Style style;
+        style.setProfile("test-profile");
+        StyleAttributes *attributes = style.attributes();
+        SharedKeyboardLoader loader(getLoader("styling_profile_test"));
+        Logic::KeyAreaConverter converter(attributes, loader.data());
+
+        const KeyArea key_area(converter.keyArea());
+        const Key key(key_area.keys().at(key_index));
+
+        QCOMPARE(key.label().text(), expected_label);
+        QCOMPARE(key.margins().left(), expected_left_distance);
+        QCOMPARE(key.margins().right(), expected_right_distance);
+        QCOMPARE(key.rect().x(), expected_left_edge);
+        QCOMPARE(key.rect().x() + key.rect().width(), expected_right_edge);
+    }
+};
+
+QTEST_MAIN(TestLanguageLayoutLoading)
+#include "language-layout-loading.moc"
diff --git a/maliit-keyboard/tests/language-layout-loading/language-layout-loading.pro b/maliit-keyboard/tests/language-layout-loading/language-layout-loading.pro
deleted file mode 100644
index 6b8c125..0000000
--- a/maliit-keyboard/tests/language-layout-loading/language-layout-loading.pro
+++ /dev/null
@@ -1,27 +0,0 @@
-include(../../config.pri)
-include(../common-check.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../../..
-TARGET = language-layout-loading
-TEMPLATE = app
-QT = core testlib
-
-INCLUDEPATH += ../ ../../lib ../../
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-DEFINES += TEST_DATADIR=\\\"$$PWD\\\"
-DEFINES += TEST_MALIIT_KEYBOARD_DATADIR=\\\"$$PWD\\\"
-
-HEADERS += \
-
-SOURCES += \
-    main.cpp \
-
-include(../../word-prediction.pri)
-
-QMAKE_EXTRA_TARGETS += xml_check
-xml_check.commands = \
-    xmllint --path "$$PWD/../../data/languages" --noout --dtdvalid "$$PWD/../../data/languages/VirtualKeyboardLayout.dtd" "$$PWD/languages/*.xml"
-
-check.depends += xml_check
diff --git a/maliit-keyboard/tests/language-layout-loading/main.cpp b/maliit-keyboard/tests/language-layout-loading/main.cpp
deleted file mode 100644
index 681bcfa..0000000
--- a/maliit-keyboard/tests/language-layout-loading/main.cpp
+++ /dev/null
@@ -1,625 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: maliit-discuss@lists.maliit.org
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include "utils.h"
-#include "coreutils.h"
-
-#include "models/key.h"
-#include "models/keydescription.h"
-#include "models/keyboard.h"
-#include "models/styleattributes.h"
-#include "logic/keyboardloader.h"
-#include "logic/keyareaconverter.h"
-#include "logic/style.h"
-#include "logic/layouthelper.h"
-
-#include <QtCore>
-#include <QtTest>
-#include <QDebug>
-
-using namespace MaliitKeyboard;
-
-typedef QSharedPointer<KeyboardLoader> SharedKeyboardLoader;
-
-typedef QPair<QString, QString> DictionaryValue;
-typedef QMap<QString, QString> Dictionary;
-
-typedef QPair<Key, KeyDescription> KeyDescriptionPair;
-
-Q_DECLARE_METATYPE(Dictionary)
-Q_DECLARE_METATYPE(Keyboard)
-
-namespace {
-
-SharedKeyboardLoader getLoader(const QString &id)
-{
-    SharedKeyboardLoader loader(new KeyboardLoader);
-
-    loader->setActiveId(id);
-    return loader;
-}
-
-Keyboard stringToKeyboard(const QString &str)
-{
-    enum
-    {
-        ExpectFirstSeparator,
-        ExpectKey,
-        ExpectSeparator
-    } expected_char = ExpectFirstSeparator;
-
-    Keyboard kb;
-    int row(0);
-    bool left_spacer(false);
-
-    Q_FOREACH(const QChar &c, str) {
-        switch (expected_char) {
-        case ExpectKey:
-            expected_char = ExpectSeparator;
-
-            if (c == '\n') {
-                ++row;
-            } else {
-                Label label;
-                Key key;
-                KeyDescription key_desc;
-
-                label.setText(c);
-                key.setLabel(label);
-                key_desc.row = row;
-                key_desc.left_spacer = left_spacer;
-                key_desc.right_spacer = false;
-                kb.keys.append(key);
-                kb.key_descriptions.append(key_desc);
-            }
-            left_spacer = false;
-            break;
-
-        case ExpectFirstSeparator:
-        case ExpectSeparator:
-            expected_char = ExpectKey;
-
-            switch (c.toLatin1()) {
-            case '|':
-                break;
-
-            case ' ':
-                if (not kb.key_descriptions.isEmpty()) {
-                    KeyDescription& last(kb.key_descriptions.last());
-
-                    if (last.row == row) {
-                        last.right_spacer = true;
-                    }
-                }
-                left_spacer = true;
-                break;
-
-            default:
-                qFatal("A bug in test - wrong separator (expected either | or space)");
-                break;
-            }
-            break;
-
-        default:
-            qFatal("A bug in test - wrong expected char type.");
-            break;
-        }
-    }
-
-    if (expected_char == ExpectSeparator) {
-        qFatal("A bug in test - last char should be a separator");
-    }
-
-    return kb;
-}
-
-
-Dictionary &operator<<(Dictionary &dict, const DictionaryValue &value)
-{
-    dict.insert(value.first, value.second);
-    return dict;
-}
-
-Keyboard &operator<<(Keyboard &keyboard, const KeyDescriptionPair &value)
-{
-    keyboard.keys.append(value.first);
-    keyboard.key_descriptions.append(value.second);
-    return keyboard;
-}
-
-KeyDescriptionPair createActionPair(Key::Action action = Key::ActionInsert,
-                                    KeyDescription::Icon icon_type = KeyDescription::NoIcon,
-                                    const QByteArray &icon = "")
-{
-    Key key;
-    KeyDescription desc;
-
-    key.setAction(action);
-    key.setIcon(icon);
-    desc.icon = icon_type;
-    return KeyDescriptionPair(key, desc);
-}
-
-KeyDescriptionPair createPair(const QString &text,
-                              int row,
-                              bool left_spacer,
-                              bool right_spacer)
-{
-    Label label;
-    Key key;
-    KeyDescription desc;
-
-    label.setText(text);
-    key.setLabel(label);
-    desc.row = row;
-    desc.left_spacer = left_spacer;
-    desc.right_spacer = right_spacer;
-
-    return KeyDescriptionPair(key, desc);
-}
-
-void clearKeyboard(Keyboard &kb)
-{
-    kb.keys.clear();
-    kb.key_descriptions.clear();
-    kb.style_name.clear();
-}
-
-Key getKey(const QString &text,
-           Key::Action action = Key::ActionInsert)
-{
-    Label label;
-    Key key;
-
-    label.setText(text);
-    key.setLabel(label);
-    key.setAction(action);
-
-    return key;
-}
-
-} // unnamed namespace
-
-class TestLanguageLayoutLoading
-    : public QObject
-{
-    Q_OBJECT
-
-private:
-    void compareKeyboards(const Keyboard &kb1, const Keyboard &kb2)
-    {
-        QCOMPARE(kb1.keys.size(), kb2.keys.size());
-        QCOMPARE(kb1.key_descriptions.size(), kb2.key_descriptions.size());
-        QCOMPARE(kb1.keys.size(), kb1.key_descriptions.size());
-
-        for (int iter(0); iter < kb1.keys.size(); ++iter) {
-            QCOMPARE(kb1.keys[iter].label().text(), kb2.keys[iter].label().text());
-
-            const KeyDescription& kd1(kb1.key_descriptions[iter]);
-            const KeyDescription& kd2(kb2.key_descriptions[iter]);
-
-            QCOMPARE(kd1.row, kd2.row);
-            QCOMPARE(kd1.left_spacer, kd2.left_spacer);
-            QCOMPARE(kd1.right_spacer, kd2.right_spacer);
-        }
-    }
-
-    // QCOMPARE is a macro with "return;" statement in it. So it does not quit
-    // the test immediately on failure when it is used in a function called by
-    // our test routine. So we are adding another ugly macro. Wheee...
-#define COMPARE_KEYBOARDS(gotten_keyboard, expected_keyboard) \
-    compareKeyboards(gotten_keyboard, expected_keyboard); \
-    if (QTest::currentTestFailed()) { \
-        return; \
-    }
-
-    Q_SLOT void initTestCase()
-    {
-        QVERIFY(qputenv("MALIIT_PLUGINS_DATADIR", TEST_DATADIR));
-        QVERIFY(qputenv("MALIIT_KEYBOARD_DATADIR", TEST_MALIIT_KEYBOARD_DATADIR));
-    }
-
-    Q_SLOT void testSanity_data()
-    {
-        QTest::addColumn<QString>("string_desc");
-        QTest::addColumn<Keyboard>("expected_keyboard");
-
-        Keyboard kb;
-        QTest::newRow("Empty string - empty keyboard")
-            << ""
-            << kb;
-        clearKeyboard(kb);
-
-        QTest::newRow("Complicated string")
-            << " a b \n c|d|"
-            << (kb
-                << createPair("a", 0, true, true)
-                << createPair("b", 0, true, true)
-                << createPair("c", 1, true, false)
-                << createPair("d", 1, false, false));
-        clearKeyboard(kb);
-    }
-
-    Q_SLOT void testSanity()
-    {
-        QFETCH(QString, string_desc);
-        QFETCH(Keyboard, expected_keyboard);
-
-        COMPARE_KEYBOARDS(stringToKeyboard(string_desc), expected_keyboard);
-    }
-
-    Q_SLOT void testGeneral_data()
-    {
-        QTest::addColumn<QString>("keyboard_id");
-        QTest::addColumn<QString>("expected_keyboard");
-        QTest::addColumn<QString>("expected_shifted_keyboard");
-        QTest::addColumn<QString>("expected_number_keyboard");
-        QTest::addColumn<QString>("expected_phone_number_keyboard");
-        QTest::addColumn<Dictionary>("expected_dead_keyboards");
-        QTest::addColumn<Dictionary>("expected_shifted_dead_keyboards");
-        QTest::addColumn<Dictionary>("expected_extended_keyboards");
-        QTest::addColumn<QStringList>("expected_symbols_keyboards");
-
-        Dictionary dead;
-        Dictionary sdead;
-        Dictionary ext;
-
-        QTest::newRow("General test")
-            << "general_test1"
-            << "|q|w|\n p a "
-            << "|Q|W|\n p a "
-            << "|0|1|\n 2 3 "
-            << " 9 8 \n 7|6 "
-            << (dead
-                << DictionaryValue(QString::fromUtf8("´"), "|q|e|\n p a ")
-                << DictionaryValue(";", "|q|r|\n p a ")
-                << DictionaryValue("'", "|q|t|\n p a "))
-            << (sdead
-                << DictionaryValue(QString::fromUtf8("´"), "|Q|E|\n p a ")
-                << DictionaryValue(";", "|Q|r|\n p a ")
-                << DictionaryValue("'", "|Q|T|\n p a "))
-            << (ext
-                << DictionaryValue("q", "|y|u|\n|i|o|")
-                << DictionaryValue("Q", "|Y|U|\n|I|O|"))
-            << (QStringList()
-                << "|1|\n|2|"
-                << "|3|\n|4|");
-        dead.clear();
-        sdead.clear();
-        ext.clear();
-    }
-
-    Q_SLOT void testGeneral()
-    {
-        QFETCH(QString, keyboard_id);
-        QFETCH(QString, expected_keyboard);
-        QFETCH(QString, expected_shifted_keyboard);
-        QFETCH(QString, expected_number_keyboard);
-        QFETCH(QString, expected_phone_number_keyboard);
-        QFETCH(Dictionary, expected_dead_keyboards);
-        QFETCH(Dictionary, expected_shifted_dead_keyboards);
-        QFETCH(Dictionary, expected_extended_keyboards);
-        QFETCH(QStringList, expected_symbols_keyboards);
-
-        SharedKeyboardLoader loader(getLoader(keyboard_id));
-
-        QVERIFY(loader->ids().indexOf(keyboard_id) != -1);
-        qDebug() << "Keyboard";
-        COMPARE_KEYBOARDS(loader->keyboard(), stringToKeyboard(expected_keyboard));
-        qDebug() << "Shifted eyboard";
-        COMPARE_KEYBOARDS(loader->shiftedKeyboard(), stringToKeyboard(expected_shifted_keyboard));
-        qDebug() << "Number keyboard";
-        COMPARE_KEYBOARDS(loader->numberKeyboard(), stringToKeyboard(expected_number_keyboard));
-        qDebug() << "Phonenumber keyboard";
-        COMPARE_KEYBOARDS(loader->phoneNumberKeyboard(), stringToKeyboard(expected_phone_number_keyboard));
-
-        Q_FOREACH(const QString &dead_text, expected_dead_keyboards.keys()) {
-            Key dead_key;
-            Label dead_label;
-
-            dead_label.setText(dead_text);
-            dead_key.setLabel(dead_label);
-            qDebug() << "Dead keyboard for:" << dead_text;
-            COMPARE_KEYBOARDS(loader->deadKeyboard(dead_key), stringToKeyboard(expected_dead_keyboards[dead_text]));
-        }
-
-        Q_FOREACH(const QString &dead_text, expected_shifted_dead_keyboards.keys()) {
-            Key dead_key;
-            Label dead_label;
-
-            dead_label.setText(dead_text);
-            dead_key.setLabel(dead_label);
-            qDebug() << "Shifted dead keyboard for:" << dead_text;
-            COMPARE_KEYBOARDS(loader->shiftedDeadKeyboard(dead_key), stringToKeyboard(expected_shifted_dead_keyboards[dead_text]));
-        }
-
-        for (int iter(0); iter <= expected_symbols_keyboards.size(); ++iter) {
-            int index(iter % expected_symbols_keyboards.size());
-
-            qDebug() << "Symbols keyboard, page:" << iter << "(expected page:" << index << ")";
-            COMPARE_KEYBOARDS(loader->symbolsKeyboard(iter), stringToKeyboard(expected_symbols_keyboards[index]));
-        }
-    }
-
-    Q_SLOT void testStyle_data()
-    {
-        QTest::addColumn<QString>("keyboard_id");
-        QTest::addColumn<QString>("expected_style");
-
-        QTest::newRow("No style given in xml")
-            << "style_test1"
-            << "keys4";
-
-        QTest::newRow("Style given in xml")
-            << "style_test2"
-            << "four_symbols";
-    }
-
-    Q_SLOT void testStyle()
-    {
-        QFETCH(QString, keyboard_id);
-        QFETCH(QString, expected_style);
-
-        SharedKeyboardLoader loader(getLoader(keyboard_id));
-        QCOMPARE(loader->keyboard().style_name, expected_style);
-    }
-
-    Q_SLOT void testAction_data()
-    {
-        QTest::addColumn<QString>("keyboard_id");
-        QTest::addColumn<Keyboard>("expected_keyboard");
-
-        Keyboard kb;
-
-        QTest::newRow("Implicit insert action")
-            << "action_test1"
-            << (kb
-                << createActionPair());
-        clearKeyboard(kb);
-
-        QTest::newRow("Explicit actions")
-            << "action_test2"
-            << (kb
-                << createActionPair()
-                << createActionPair(Key::ActionShift)
-                << createActionPair(Key::ActionBackspace)
-                << createActionPair(Key::ActionReturn));
-        clearKeyboard(kb);
-
-        QTest::newRow("Dead action")
-            << "action_test3"
-            << (kb
-                << createActionPair(Key::ActionDead));
-        clearKeyboard(kb);
-    }
-
-    Q_SLOT void testAction()
-    {
-        QFETCH(QString, keyboard_id);
-        QFETCH(Keyboard, expected_keyboard);
-
-        SharedKeyboardLoader loader(getLoader(keyboard_id));
-        Keyboard gotten_keyboard(loader->keyboard());
-
-        QCOMPARE(gotten_keyboard.keys.size(), expected_keyboard.keys.size());
-
-        for (int iter(0); iter < expected_keyboard.keys.size(); ++iter) {
-            const Key &gotten_key(gotten_keyboard.keys[iter]);
-            const Key &expected_key(expected_keyboard.keys[iter]);
-
-            QCOMPARE(gotten_key.action(), expected_key.action());
-        }
-    }
-
-    Q_SLOT void testIcon_data()
-    {
-        QTest::addColumn<QString>("keyboard_id");
-        QTest::addColumn<Keyboard>("expected_keyboard");
-
-        Keyboard kb;
-        QTest::newRow("Default icons")
-            << "icon_test1"
-            << (kb
-                << createActionPair(Key::ActionBackspace, KeyDescription::BackspaceIcon)
-                << createActionPair(Key::ActionReturn, KeyDescription::ReturnIcon)
-                << createActionPair(Key::ActionShift, KeyDescription::ShiftIcon)
-                << createActionPair(Key::ActionClose, KeyDescription::CloseIcon));
-        clearKeyboard(kb);
-
-        QTest::newRow("Custom or empty icons")
-            << "icon_test2"
-            << (kb
-                << createActionPair()
-                << createActionPair(Key::ActionInsert, KeyDescription::CustomIcon, "overriden_icon"));
-        clearKeyboard(kb);
-
-        /* TODO: Commented out for now, as it is not not possible to override
-           icons for some action keys and I don't know if we want to allow
-           this. I would say that we indeed do want.
-
-        QTest::newRow("Overriden icons")
-            << "icon_test3"
-            << (kb
-                << actionPair(Key::ActionClose, KeyDescription::CustomIcon, "overriden_icon"));
-        clearKeyboard(kb);
-        */
-    }
-
-    Q_SLOT void testIcon()
-    {
-        QFETCH(QString, keyboard_id);
-        QFETCH(Keyboard, expected_keyboard);
-
-        SharedKeyboardLoader loader(getLoader(keyboard_id));
-        Keyboard gotten_keyboard(loader->keyboard());
-
-        QCOMPARE(gotten_keyboard.keys.size(), expected_keyboard.keys.size());
-
-        for (int iter(0); iter < expected_keyboard.keys.size(); ++iter) {
-            const Key& gotten_key(gotten_keyboard.keys[iter]);
-            const Key& expected_key(expected_keyboard.keys[iter]);
-            const KeyDescription& gotten_desc(gotten_keyboard.key_descriptions[iter]);
-            const KeyDescription& expected_desc(expected_keyboard.key_descriptions[iter]);
-
-            QCOMPARE(gotten_key.action(), expected_key.action());
-            QCOMPARE(gotten_desc.icon, expected_desc.icon);
-            QCOMPARE(gotten_key.icon(), expected_key.icon());
-        }
-    }
-
-    Q_SLOT void testExtended_data()
-    {
-        QTest::addColumn<QString>("keyboard_id");
-        QTest::addColumn<Key>("pressed_key");
-        QTest::addColumn<QString>("expected_keyboard");
-
-        // TODO: we should get rid of this prepending stuff and fix the language
-        // layouts.
-        /*
-        QTest::newRow("Extended keyboard for unshifted key (also notice prepending)")
-            << "extended_test"
-            << getKey("a")
-            << "|a|b|c|";
-        */
-
-        QTest::newRow("Extended keyboard for shifted key (also notice prepending)")
-            << "extended_test"
-            << getKey("A")
-            << "|A|B|C|";
-
-        QTest::newRow("Ignore spacers in extended keyboard")
-            << "extended_test"
-            << getKey("d")
-            << "|d|e|f|";
-
-        QTest::newRow("Extended keyboard with multiple rows (also notice lack of prepending)")
-            << "extended_test"
-            << getKey("g")
-            << "|h|i|\n|j|k|";
-
-        QTest::newRow("Extended keyboard for empty label (also notice lack of prepending the key with empty label)")
-            << "extended_test"
-            << getKey("")
-            << "|x|";
-
-        QTest::newRow("No extended keyboard for spacebars.")
-            << "extended_test"
-            << getKey("", Key::ActionSpace)
-            << "";
-
-        QTest::newRow("No non-action-insert prepending")
-            << "extended_test"
-            << getKey("close", Key::ActionClose)
-            << "|X|";
-    }
-
-    Q_SLOT void testExtended()
-    {
-        QFETCH(QString, keyboard_id);
-        QFETCH(Key, pressed_key);
-        QFETCH(QString, expected_keyboard);
-
-        SharedKeyboardLoader loader(getLoader(keyboard_id));
-
-        COMPARE_KEYBOARDS(loader->extendedKeyboard(pressed_key), stringToKeyboard(expected_keyboard));
-    }
-
-    Q_SLOT void testStylingProfile()
-    {
-        const Logic::LayoutHelper::Orientation orientation(Logic::LayoutHelper::Landscape);
-        Style style;
-        QCOMPARE(style.availableProfiles().size(), 1);
-        QCOMPARE(style.availableProfiles().first(), QString("test-profile"));
-        QCOMPARE(style.profile(), QString());
-        QCOMPARE(style.attributes()->fontSize(orientation), 0.0);
-        QCOMPARE(style.extendedKeysAttributes()->fontSize(orientation), 0.0);
-        QCOMPARE(style.directory(Style::Images), QString());
-        QCOMPARE(style.directory(Style::Fonts), QString());
-        QCOMPARE(style.directory(Style::Sounds), QString());
-
-        QSignalSpy profile_changed_spy(&style, SIGNAL(profileChanged()));
-        style.setProfile("test-profile");
-        QCOMPARE(profile_changed_spy.count(), 1);
-        QCOMPARE(style.profile(), QString("test-profile"));
-        QCOMPARE(style.attributes()->fontSize(orientation), 10.0);
-        QCOMPARE(style.extendedKeysAttributes()->fontSize(orientation), 0.0);
-
-        const QString test_profile_dir(QString::fromLatin1(TEST_MALIIT_KEYBOARD_DATADIR)
-                                       + "/styles/test-profile");
-        QCOMPARE(style.directory(Style::Images), test_profile_dir + "/images");
-        QCOMPARE(style.directory(Style::Fonts), test_profile_dir + "/fonts");
-        QCOMPARE(style.directory(Style::Sounds), test_profile_dir + "/sounds");
-    }
-
-    Q_SLOT void testKeyGeometryStyling_data()
-    {
-        QTest::addColumn<int>("key_index");
-        QTest::addColumn<QString>("expected_label");
-        QTest::addColumn<int>("expected_left_distance");
-        QTest::addColumn<int>("expected_right_distance");
-        QTest::addColumn<int>("expected_left_edge");
-        QTest::addColumn<int>("expected_right_edge");
-
-        QTest::newRow("1st row: ' a|b ', testing geometry of 'a'.")
-            << 0 << QString("a") << 25 << 5 << 0 << 50;
-
-        QTest::newRow("1st row: ' a|b ', testing geometry of 'b'.")
-            << 1 << QString("b") << 5 << 25 << 50 << 100;
-    }
-
-    Q_SLOT void testKeyGeometryStyling()
-    {
-        QFETCH(int, key_index);
-        QFETCH(QString, expected_label);
-        QFETCH(int, expected_left_distance);
-        QFETCH(int, expected_right_distance);
-        QFETCH(int, expected_left_edge);
-        QFETCH(int, expected_right_edge);
-
-        Style style;
-        style.setProfile("test-profile");
-        StyleAttributes *attributes = style.attributes();
-        SharedKeyboardLoader loader(getLoader("styling_profile_test"));
-        Logic::KeyAreaConverter converter(attributes, loader.data());
-
-        const KeyArea key_area(converter.keyArea());
-        const Key key(key_area.keys().at(key_index));
-
-        QCOMPARE(key.label().text(), expected_label);
-        QCOMPARE(key.margins().left(), expected_left_distance);
-        QCOMPARE(key.margins().right(), expected_right_distance);
-        QCOMPARE(key.rect().x(), expected_left_edge);
-        QCOMPARE(key.rect().x() + key.rect().width(), expected_right_edge);
-    }
-};
-
-QTEST_MAIN(TestLanguageLayoutLoading)
-#include "main.moc"
diff --git a/maliit-keyboard/tests/language-layout-switching/language-layout-switching.cpp b/maliit-keyboard/tests/language-layout-switching/language-layout-switching.cpp
new file mode 100644
index 0000000..9c7e00f
--- /dev/null
+++ b/maliit-keyboard/tests/language-layout-switching/language-layout-switching.cpp
@@ -0,0 +1,124 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: Mohammad Anwari <Mohammad.Anwari@nokia.com>
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include "utils.h"
+#include "models/key.h"
+#include "models/keyarea.h"
+#include "logic/layouthelper.h"
+#include "plugin/editor.h"
+#include "logic/layoutupdater.h"
+#include "logic/languagefeatures.h"
+#include "logic/wordengine.h"
+#include "inputmethodhostprobe.h"
+
+#include <QtCore>
+#include <QtTest>
+
+using namespace MaliitKeyboard;
+
+class TestLanguageLayoutSwitching
+    : public QObject
+{
+    Q_OBJECT
+
+private:
+    Q_SLOT void testActiveKeyboardId_data()
+    {
+        QTest::addColumn<QString>("keyboard_id");
+        QTest::addColumn<int>("expected_key_count");
+
+        QTest::newRow("Using invalid keyboard id: expect empty KeyArea.")
+            << "invalid_language_layout_id" << 0;
+
+        QTest::newRow("Using 'en_gb' as keyboard id: expect KeyArea with 33 keys.")
+            << "en_gb" << 33;
+
+        QTest::newRow("Using 'de' as keyboard id: expect KeyArea with 36 keys.")
+            << "de" << 36;
+    }
+
+    Q_SLOT void testActiveKeyboardId()
+    {
+        QFETCH(QString, keyboard_id);
+        QFETCH(int, expected_key_count);
+
+        Logic::LayoutUpdater layout_updater;
+
+        Logic::LayoutHelper layout(new Logic::LayoutHelper);
+        layout_updater.setLayout(&layout);
+
+        SharedStyle style(new Style);
+        layout_updater.setStyle(style);
+
+        layout_updater.setActiveKeyboardId(keyboard_id);
+        TestUtils::waitForSignal(&layout, SIGNAL(centerPanelChanged(KeyArea,Logic::KeyOverrides)));
+
+        QCOMPARE(layout.activePanel(), Logic::LayoutHelper::CenterPanel);
+        QCOMPARE(layout.activeKeyArea().keys().count(), expected_key_count);
+    }
+
+    // This test is very trivial. It's required however because none of the
+    // current mainline layouts feature layout switch keys, thus making
+    // regressions impossible to spot.
+    // TODO: Let this test run on actual language layouts w/ layout switch
+    // keys.
+    Q_SLOT void testLayoutSwitchKeys()
+    {
+        Key left_layout;
+        left_layout.setAction(Key::ActionLeftLayout);
+
+        Key right_layout;
+        right_layout.setAction(Key::ActionRightLayout);
+
+        Editor editor(new Model::Text, new Logic::WordEngine, new Logic::LanguageFeatures);
+        InputMethodHostProbe probe;
+        editor.setHost(&probe);
+
+        QSignalSpy left_spy(&editor, SIGNAL(leftLayoutSelected()));
+        QSignalSpy right_spy(&editor, SIGNAL(rightLayoutSelected()));
+
+        editor.onKeyPressed(left_layout);
+        QCOMPARE(left_spy.count(), 0);
+
+        editor.onKeyReleased(left_layout);
+        QCOMPARE(left_spy.count(), 1);
+
+        editor.onKeyPressed(right_layout);
+        QCOMPARE(right_spy.count(), 0);
+
+        editor.onKeyReleased(right_layout);
+        QCOMPARE(right_spy.count(), 1);
+    }
+};
+
+QTEST_MAIN(TestLanguageLayoutSwitching)
+#include "language-layout-switching.moc"
diff --git a/maliit-keyboard/tests/language-layout-switching/language-layout-switching.pro b/maliit-keyboard/tests/language-layout-switching/language-layout-switching.pro
deleted file mode 100644
index a68f1bf..0000000
--- a/maliit-keyboard/tests/language-layout-switching/language-layout-switching.pro
+++ /dev/null
@@ -1,23 +0,0 @@
-include(../../config.pri)
-include(../common-check.pri)
-include(../../config-plugin.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../../..
-TARGET = language-layout-switching
-TEMPLATE = app
-QT = core testlib gui
-
-!contains(QT_MAJOR_VERSION, 4) {
-    QT += widgets
-}
-
-INCLUDEPATH += ../../lib ../../
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-HEADERS += \
-
-SOURCES += \
-    main.cpp \
-
-include(../../word-prediction.pri)
diff --git a/maliit-keyboard/tests/language-layout-switching/main.cpp b/maliit-keyboard/tests/language-layout-switching/main.cpp
deleted file mode 100644
index 44f85d6..0000000
--- a/maliit-keyboard/tests/language-layout-switching/main.cpp
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: Mohammad Anwari <Mohammad.Anwari@nokia.com>
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include "utils.h"
-#include "models/key.h"
-#include "models/keyarea.h"
-#include "logic/layouthelper.h"
-#include "plugin/editor.h"
-#include "logic/layoutupdater.h"
-#include "logic/style.h"
-#include "inputmethodhostprobe.h"
-
-#include <QtCore>
-#include <QtTest>
-
-using namespace MaliitKeyboard;
-
-class TestLanguageLayoutSwitching
-    : public QObject
-{
-    Q_OBJECT
-
-private:
-    Q_SLOT void testActiveKeyboardId_data()
-    {
-        QTest::addColumn<QString>("keyboard_id");
-        QTest::addColumn<int>("expected_key_count");
-
-        QTest::newRow("Using invalid keyboard id: expect empty KeyArea.")
-            << "invalid_language_layout_id" << 0;
-
-        QTest::newRow("Using 'en_gb' as keyboard id: expect KeyArea with 33 keys.")
-            << "en_gb" << 33;
-
-        QTest::newRow("Using 'de' as keyboard id: expect KeyArea with 36 keys.")
-            << "de" << 36;
-    }
-
-    Q_SLOT void testActiveKeyboardId()
-    {
-        QFETCH(QString, keyboard_id);
-        QFETCH(int, expected_key_count);
-
-        Logic::LayoutUpdater layout_updater;
-
-        Logic::LayoutHelper layout(new Logic::LayoutHelper);
-        layout_updater.setLayout(&layout);
-
-        SharedStyle style(new Style);
-        layout_updater.setStyle(style);
-
-        layout_updater.setActiveKeyboardId(keyboard_id);
-        TestUtils::waitForSignal(&layout, SIGNAL(centerPanelChanged(KeyArea,Logic::KeyOverrides)));
-
-        QCOMPARE(layout.activePanel(), Logic::LayoutHelper::CenterPanel);
-        QCOMPARE(layout.activeKeyArea().keys().count(), expected_key_count);
-    }
-
-    // This test is very trivial. It's required however because none of the
-    // current mainline layouts feature layout switch keys, thus making
-    // regressions impossible to spot.
-    // TODO: Let this test run on actual language layouts w/ layout switch
-    // keys.
-    Q_SLOT void testLayoutSwitchKeys()
-    {
-        Key left_layout;
-        left_layout.setAction(Key::ActionLeftLayout);
-
-        Key right_layout;
-        right_layout.setAction(Key::ActionRightLayout);
-
-        Editor editor(0, 0, 0);
-        InputMethodHostProbe probe;
-        editor.setHost(&probe);
-
-        QSignalSpy left_spy(&editor, SIGNAL(leftLayoutSelected()));
-        QSignalSpy right_spy(&editor, SIGNAL(rightLayoutSelected()));
-
-        editor.onKeyPressed(left_layout);
-        QCOMPARE(left_spy.count(), 0);
-
-        editor.onKeyReleased(left_layout);
-        QCOMPARE(left_spy.count(), 1);
-
-        editor.onKeyPressed(right_layout);
-        QCOMPARE(right_spy.count(), 0);
-
-        editor.onKeyReleased(right_layout);
-        QCOMPARE(right_spy.count(), 1);
-    }
-};
-
-QTEST_MAIN(TestLanguageLayoutSwitching)
-#include "main.moc"
diff --git a/maliit-keyboard/tests/preedit-string/main.cpp b/maliit-keyboard/tests/preedit-string/main.cpp
deleted file mode 100644
index f6f3dde..0000000
--- a/maliit-keyboard/tests/preedit-string/main.cpp
+++ /dev/null
@@ -1,626 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: Mohammad Anwari <Mohammad.Anwari@nokia.com>
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include "utils.h"
-
-#include "models/area.h"
-#include "models/key.h"
-#include "models/keyarea.h"
-#include "models/text.h"
-#include "models/layout.h"
-
-#include "logic/languagefeatures.h"
-#include "logic/layouthelper.h"
-#include "logic/layoutupdater.h"
-#include "logic/eventhandler.h"
-#include "logic/style.h"
-
-#include "plugin/editor.h"
-#include "plugin/updatenotifier.h"
-#include "inputmethodhostprobe.h"
-#include "wordengineprobe.h"
-
-#include <maliit/plugins/updateevent.h>
-
-#include <QtTest>
-#include <QtCore>
-#include <QtGui>
-
-#include <QtWidgets>
-
-using namespace MaliitKeyboard;
-Q_DECLARE_METATYPE(Logic::LayoutHelper::Orientation)
-Q_DECLARE_METATYPE(QList<QMouseEvent*>)
-
-namespace {
-const int g_size = 48;
-const int g_divider = 3;
-
-QPoint keyOriginLookup(const QString &name)
-{
-    static const int distance = g_size / g_divider;
-
-    if (name == "a") {
-        return QPoint(0, 0);
-    } else if (name == "b") {
-        return QPoint(distance, 0);
-    } else if (name == "c") {
-        return QPoint(0, distance);
-    } else if (name == "d") {
-        return QPoint(distance, distance);
-    } else if (name == "space") {
-        return QPoint(distance * 2, 0);
-    } else if (name == "return") {
-        return QPoint(distance * 2, distance);
-    }
-
-    return QPoint();
-}
-
-Key createKey(Key::Action action,
-              const QString &text)
-{
-    static const QSize size(g_size / g_divider, g_size / g_divider);
-
-    Key result;
-    result.setAction(action);
-    result.setOrigin(keyOriginLookup(text));
-    result.rArea().setSize(size);
-    result.rLabel().setText(text);
-
-    return result;
-}
-
-// Populate KeyArea with six keys, a, b, c, d, space and return. Notice how the KeyArea
-// covers the whole widget. Key width and height equals g_size / g_divider.
-// .-----------.
-// | a | b |<s>|
-// |---|---|---|
-// | c | d |<r>|
-// `-----------'
-KeyArea createAbcdArea()
-{
-    KeyArea key_area;
-    Area area;
-    area.setSize(QSize(g_size, g_size));
-    key_area.setArea(area);
-
-    key_area.rKeys().append(createKey(Key::ActionInsert, "a"));
-    key_area.rKeys().append(createKey(Key::ActionInsert, "b"));
-    key_area.rKeys().append(createKey(Key::ActionInsert, "c"));
-    key_area.rKeys().append(createKey(Key::ActionInsert, "d"));
-    key_area.rKeys().append(createKey(Key::ActionSpace,  "space"));
-    key_area.rKeys().append(createKey(Key::ActionReturn, "return"));
-
-    return key_area;
-}
-
-int lookup(const QString &name)
-{
-    if (name == "a") {
-        return 0;
-    } else if (name == "b") {
-        return 1;
-    } else if (name == "c") {
-        return 2;
-    } else if (name == "d") {
-        return 3;
-    } else if (name == "space") {
-        return 4;
-    } else if (name == "return") {
-        return 5;
-    }
-
-    return -1;
-}
-
-bool operator==(const Maliit::PreeditTextFormat &a, const Maliit::PreeditTextFormat &b) {
-    return ((a.start == b.start) and (a.length == b.length) and (a.preeditFace == b.preeditFace));
-}
-
-MImUpdateEvent *createUpdateEvent(const QString &surrounding_text,
-                                  int cursor_position)
-{
-    const char *const cur_pos("cursorPosition");
-    QStringList properties_changed(cur_pos);
-    QMap<QString, QVariant> update;
-
-    update.insert(cur_pos, cursor_position);
-    update.insert("surroundingText", surrounding_text);
-
-    return new MImUpdateEvent(update, properties_changed);
-}
-
-} // unnamed namespace
-
-struct BasicSetupTest
-{
-    BasicSetupTest(bool enable_word_engine = true)
-        : editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures, 0)
-        , host()
-        , notifier()
-    {
-        editor.setHost(&host);
-        editor.wordEngine()->setEnabled(enable_word_engine);
-
-        QObject::connect(&notifier, SIGNAL(cursorPositionChanged(int, QString)),
-                         &editor,   SLOT(onCursorPositionChanged(int, QString)));
-
-    }
-
-    Editor editor;
-    InputMethodHostProbe host;
-    UpdateNotifier notifier;
-};
-
-class SetupTest
-    : public BasicSetupTest
-{
-public:
-    Model::Layout layout;
-    Logic::LayoutUpdater layout_updater;
-    Logic::LayoutHelper layout_helper;
-    Logic::EventHandler event_handler;
-    SharedStyle style;
-    QScopedPointer<QGraphicsView> surface;
-    QScopedPointer<QGraphicsView> extended_surface;
-    KeyArea key_area;
-
-    SetupTest(Logic::LayoutHelper::Orientation orientation = Logic::LayoutHelper::Landscape,
-              bool enable_word_engine = true)
-        : BasicSetupTest(enable_word_engine)
-        , layout()
-        , layout_updater()
-        , layout_helper()
-        , event_handler(&layout, &layout_updater)
-        , style(new Style(qApp))
-        , surface(new QGraphicsView)
-        , extended_surface(new QGraphicsView(surface.data()))
-        , key_area(createAbcdArea())
-    {
-        // geometry stuff is usually done by maliit-server, so we need
-        // to do it manually here:
-        surface->setSceneRect(0, 0, g_size, g_size);
-        surface->scene()->setSceneRect(0, 0, g_size, g_size);
-        layout_helper.setOrientation(orientation);
-
-        Logic::connectEventHandlerToTextEditor(&event_handler, &editor);
-
-        layout_helper.setExtendedPanel(key_area);
-        layout_helper.setActivePanel(Logic::LayoutHelper::ExtendedPanel);
-
-        layout_updater.setLayout(&layout_helper);
-        layout_updater.setStyle(style);
-
-        layout.setKeyArea(key_area);
-    }
-};
-
-class TestPreeditString
-    : public QObject
-{
-    Q_OBJECT
-
-private:
-    typedef QList<Maliit::PreeditTextFormat> FormatList;
-
-    Q_SLOT void initTestCase()
-    {
-        qRegisterMetaType<QList<QMouseEvent*> >();
-        qRegisterMetaType<Logic::LayoutHelper::Orientation>();
-        qRegisterMetaType<FormatList>();
-    }
-
-    Q_SLOT void test_data()
-    {
-        QTest::addColumn<Logic::LayoutHelper::Orientation>("orientation");
-        QTest::addColumn<QStringList>("keys");
-        QTest::addColumn<QString>("expected_last_preedit_string");
-        QTest::addColumn<QString>("expected_commit_string");
-        QTest::addColumn<FormatList>("expected_preedit_format");
-        QTest::addColumn<bool>("word_engine_enabled");
-        QTest::addColumn<int>("expected_cursor_position");
-
-        for (int orientation = 0; orientation < 1; ++orientation) {
-            // FIXME: here should be 2          ^
-            // FIXME: tests fail for portrait layouts
-            const Logic::LayoutHelper::Orientation layout_orientation(orientation == 0
-                                                                ? Logic::LayoutHelper::Landscape
-                                                                : Logic::LayoutHelper::Portrait);
-            QTest::newRow("No mouse events: expect empty commit string, should be no preedit face")
-                << layout_orientation
-                << (QStringList())
-                << "" << "" << FormatList() << true << 0;
-
-            QTest::newRow("Only return pressed: expect empty commit string, should be no preedit face")
-                << layout_orientation
-                << (QStringList() << "return")
-                << "" << "" << FormatList() << true << 0;
-
-            QTest::newRow("Release button over key 'a': expect commit string 'a', preedit face should be active.")
-                << layout_orientation
-                << (QStringList() << "a" << "return")
-                << "a" << "a" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditActive)) << true << 0;
-
-            QTest::newRow("Release button over key 'a', but no commit: expect empty commit string.")
-                << layout_orientation
-                << (QStringList() << "a")
-                << "a" << "" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditActive)) << true << 1;
-
-            QTest::newRow("Release button over keys 'c, b, d, a': expect commit string 'cbda', preedit face should be no candidates")
-                << layout_orientation
-                << (QStringList() << "c" << "b" << "d" << "a" << "space")
-                << "cbda" << "cbda " << (FormatList() << Maliit::PreeditTextFormat(0, 4, Maliit::PreeditNoCandidates)) << true << 0;
-
-            QTest::newRow("Typing two words: expect commit string 'ab cd', with last preedit being 'cd', preedit face should be no candidates.")
-                << layout_orientation
-                << (QStringList() << "a" << "b" << "space" << "c" << "d" << "return")
-                << "cd" << "ab cd" << (FormatList() << Maliit::PreeditTextFormat(0, 2, Maliit::PreeditNoCandidates)) << true << 0;
-
-            QTest::newRow("Typing one word 'abd': expect commit string 'abd', with last preedit being 'abd', preedit face should be default")
-                << layout_orientation
-                << (QStringList() << "a" << "b" << "d" << "return")
-                << "abd" << "abd" << (FormatList() << Maliit::PreeditTextFormat(0, 3, Maliit::PreeditDefault)) << true << 0;
-
-            // TODO: we probably should not sent any preedit formats when word engine is turned off.
-            QTest::newRow("Typing one word 'abd' with word engine turned off: expect commit string 'abd', with preedit being last char, should be no preedit face")
-                << layout_orientation
-                << (QStringList() << "a" << "b" << "d")
-                << "d" << "abd" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditDefault)) << false << 0;
-
-            QTest::newRow("Typing one word 'ab' with word engine turned off: expect commit string 'ab', with preedit being last char, should be no preedit face")
-                << layout_orientation
-                << (QStringList() << "a" << "b")
-                << "b" << "ab" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditDefault)) << false << 0;
-
-            QTest::newRow("Typing one word 'bd' with word engine turned off: expect commit string 'bd', with preedit being last char, face should be for one char with default face")
-                << layout_orientation
-                << (QStringList() << "b" << "d")
-                << "d" << "bd" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditDefault)) << false << 0;
-
-        }
-    }
-
-    Q_SLOT void test()
-    {
-        // FIXME: mikhas: We should have tests for the preedit &
-        // preedit correctness stuff, and how it blends with word
-        // prediction. I guess you will need to add
-        // WordEngine::setSpellChecker() API so that you can inject a
-        // fake spellchecker, for the tests. Otherwise, the test would
-        // have to be skipped when there's no hunspell/presage, which
-        // I wouldn't like to have.
-
-        QFETCH(Logic::LayoutHelper::Orientation, orientation);
-        QFETCH(QStringList, keys);
-        QFETCH(QString, expected_last_preedit_string);
-        QFETCH(QString, expected_commit_string);
-        QFETCH(QList<Maliit::PreeditTextFormat>, expected_preedit_format);
-        QFETCH(bool, word_engine_enabled);
-        QFETCH(int, expected_cursor_position);
-
-        SetupTest test_setup(orientation, word_engine_enabled);
-
-        Q_FOREACH (const QString &k, keys) {
-            test_setup.event_handler.onPressed(lookup(k));
-            test_setup.event_handler.onReleased(lookup(k));
-        }
-
-        TestUtils::waitForSignal(&test_setup.event_handler, SIGNAL(keyReleased(Key)));
-        QCOMPARE(test_setup.host.lastPreeditString(), expected_last_preedit_string);
-        QCOMPARE(test_setup.host.commitStringHistory(), expected_commit_string);
-        QCOMPARE(test_setup.host.lastPreeditTextFormatList(), expected_preedit_format);
-        QCOMPARE(test_setup.editor.text()->cursorPosition(), expected_cursor_position);
-    }
-
-    Q_SLOT void testPreeditActivation_data()
-    {
-        QTest::addColumn<QString>("surrounding_text");
-        QTest::addColumn<int>("cursor_position");
-        QTest::addColumn<QString>("expected_preedit");
-        QTest::addColumn<int>("expected_replace_start");
-        QTest::addColumn<int>("expected_replace_length");
-        QTest::addColumn<int>("expected_cursor_position");
-        QTest::addColumn<bool>("expected_preedit_string_sent");
-
-        QTest::newRow("'aaa bbb', select first 'a'")
-            << "aaa bbbb" // surrounding text
-            << 0 // chosen cursor position
-            << "aaa" // expected preedit
-            << 0 // expected replace start (relative to cursor position in a preedit)
-            << 3 // expected replace length
-            << 0 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("'aaa bbb', select second 'a'")
-            << "aaa bbbb" // surrounding text
-            << 1 // chosen cursor position
-            << "aaa" // expected preedit
-            << -1 // expected replace start (relative to cursor position in a preedit)
-            << 3 // expected replace length
-            << 1 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("'aaa bbb', select third 'a'")
-            << "aaa bbbb" // surrounding text
-            << 2 // chosen cursor position
-            << "aaa" // expected preedit
-            << -2 // expected replace start (relative to cursor position in a preedit)
-            << 3 // expected replace length
-            << 2 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("'aaa bbb', select space between words")
-            << "aaa bbbb" // surrounding text
-            << 3 // chosen cursor position
-            << "aaa" // expected preedit
-            << -3 // expected replace start (relative to cursor position in a preedit)
-            << 3 // expected replace length
-            << 3 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("'aaa bbb', select first 'b'")
-            << "aaa bbbb" // surrounding text
-            << 4 // chosen cursor position
-            << "bbbb" // expected preedit
-            << 0 // expected replace start (relative to cursor position in a preedit)
-            << 4 // expected replace length
-            << 0 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("'aaa bbb', select after last 'b'")
-            << "aaa bbbb" // surrounding text
-            << 8 // chosen cursor position
-            << "bbbb" // expected preedit
-            << -4 // expected replace start (relative to cursor position in a preedit)
-            << 4 // expected replace length
-            << 4 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("' aaa', select leading space")
-            << " aaa" // surrounding text
-            << 0 // chosen cursor position
-            << "" // expected preedit
-            << 0 // expected replace start (relative to cursor position in a preedit)
-            << 0 // expected replace length
-            << 0 // expected cursor position (relative to the beginning of preedit)
-            << false; // whether preedit is sent
-
-        QTest::newRow("'a  b', select space before 'b'")
-            << "a  b" // surrounding text
-            << 2 // chosen cursor position
-            << "" // expected preedit
-            << 0 // expected replace start (relative to cursor position in a preedit)
-            << 0 // expected replace length
-            << 0 // expected cursor position (relative to the beginning of preedit)
-            << false; // whether preedit is sent
-
-        QTest::newRow("'a  ', select last space")
-            << "a  " // surrounding text
-            << 2 // chosen cursor position
-            << "" // expected preedit
-            << 0 // expected replace start (relative to cursor position in a preedit)
-            << 0 // expected replace length
-            << 0 // expected cursor position (relative to the beginning of preedit)
-            << false; // whether preedit is sent
-
-        QTest::newRow("'a ', select after last space")
-            << "a " // surrounding text
-            << 2 // chosen cursor position
-            << "" // expected preedit
-            << 0 // expected replace start (relative to cursor position in a preedit)
-            << 0 // expected replace length
-            << 0 // expected cursor position (relative to the beginning of preedit)
-            << false; // whether preedit is sent
-
-        QTest::newRow("'aaa', select far after last char")
-            << "aaa" // surrounding text
-            << 200 // chosen cursor position
-            << "aaa" // expected preedit
-            << -3 // expected replace start (relative to cursor position in a preedit)
-            << 3 // expected replace length
-            << 3 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("'aaa', select far before first char")
-            << "aaa" // surrounding text
-            << -200 // chosen cursor position
-            << "aaa" // expected preedit
-            << 0 // expected replace start (relative to cursor position in a preedit)
-            << 3 // expected replace length
-            << 0 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-
-        QTest::newRow("' aaa ', select trailing space")
-            << " aaa " // surrounding text
-            << 4 // chosen cursor position
-            << "aaa" // expected preedit
-            << -3 // expected replace start (relative to cursor position in a preedit)
-            << 3 // expected replace length
-            << 3 // expected cursor position (relative to the beginning of preedit)
-            << true; // whether preedit is sent
-    }
-
-    Q_SLOT void testPreeditActivation()
-    {
-        QFETCH(QString, surrounding_text);
-        QFETCH(int, cursor_position);
-        QFETCH(QString, expected_preedit);
-        QFETCH(int, expected_replace_start);
-        QFETCH(int, expected_replace_length);
-        QFETCH(int, expected_cursor_position);
-        QFETCH(bool, expected_preedit_string_sent);
-
-        BasicSetupTest test_setup;
-        QScopedPointer<MImUpdateEvent> update_event(createUpdateEvent(surrounding_text,
-                                                                      cursor_position));
-
-        test_setup.notifier.notify(update_event.data());
-
-        QCOMPARE(test_setup.host.preeditStringSent(), expected_preedit_string_sent);
-        if (expected_preedit_string_sent) {
-            QCOMPARE(test_setup.host.lastPreeditString(), expected_preedit);
-            QCOMPARE(test_setup.host.lastReplaceStart(), expected_replace_start);
-            QCOMPARE(test_setup.host.lastReplaceLength(), expected_replace_length);
-            QCOMPARE(test_setup.host.lastCursorPos(), expected_cursor_position);
-        }
-        QCOMPARE(test_setup.editor.text()->preedit(), expected_preedit);
-        QCOMPARE(test_setup.editor.text()->cursorPosition(), expected_cursor_position);
-    }
-
-    Q_SLOT void testPreeditActivationTyping_data()
-    {
-        QTest::addColumn<QString>("surrounding_text");
-        QTest::addColumn<int>("cursor_position");
-        QTest::addColumn<QStringList >("keys");
-        QTest::addColumn<QString>("expected_preedit_string");
-        QTest::addColumn<int>("expected_cursor_position");
-
-        QTest::newRow("'aaa bbb', select first 'a', then type 'd'")
-            << "aaa bbbb" // surrounding text
-            << 0 // chosen cursor position
-            << (QStringList() << "d")
-            << "daaa" // expected preedit
-            << 1; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'aaa bbb', select second 'a', then type 'd'")
-            << "aaa bbbb" // surrounding text
-            << 1 // chosen cursor position
-            << (QStringList() << "d")
-            << "adaa" // expected preedit
-            << 2; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'aaa bbb', select third 'a', then type 'd'")
-            << "aaa bbbb" // surrounding text
-            << 2 // chosen cursor position
-            << (QStringList() << "d")
-            << "aada" // expected preedit
-            << 3; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'aaa bbb', select space between words, then type 'd'")
-            << "aaa bbbb" // surrounding text
-            << 3 // chosen cursor position
-            << (QStringList() << "d")
-            << "aaad" // expected preedit
-            << 4; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'aaa bbb', select first 'b', then type 'd'")
-            << "aaa bbbb" // surrounding text
-            << 4 // chosen cursor position
-            << (QStringList() << "d")
-            << "dbbbb" // expected preedit
-            << 1; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'aaa bbb', select after last 'b', then type 'd'")
-            << "aaa bbbb" // surrounding text
-            << 8 // chosen cursor position
-            << (QStringList() << "d")
-            << "bbbbd" // expected preedit
-            << 5; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("' aaa', select leading space, then type 'd'")
-            << " aaa" // surrounding text
-            << 0 // chosen cursor position
-            << (QStringList() << "d")
-            << "d" // expected preedit
-            << 1; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'a  b', select space before 'b', then type 'd'")
-            << "a  b" // surrounding text
-            << 2 // chosen cursor position
-            << (QStringList() << "d")
-            << "d" // expected preedit
-            << 1; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'a  ', select last space, then type 'd'")
-            << "a  " // surrounding text
-            << 2 // chosen cursor position
-            << (QStringList() << "d")
-            << "d" // expected preedit
-            << 1; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'a ', select after last space, then type 'd'")
-            << "a " // surrounding text
-            << 2 // chosen cursor position
-            << (QStringList() << "d")
-            << "d" // expected preedit
-            << 1; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'aaa', select far after last char, then type 'd'")
-            << "aaa" // surrounding text
-            << 200 // chosen cursor position
-            << (QStringList() << "d")
-            << "aaad" // expected preedit
-            << 4; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("'aaa', select far before first char, then type 'd'")
-            << "aaa" // surrounding text
-            << -200 // chosen cursor position
-            << (QStringList() << "d")
-            << "daaa" // expected preedit
-            << 1; // expected cursor position (relative to the beginning of preedit)
-
-        QTest::newRow("' aaa ', select trailing space, then type 'd'")
-            << " aaa " // surrounding text
-            << 4 // chosen cursor position
-            << (QStringList() << "d")
-            << "aaad" // expected preedit
-            << 4; // expected cursor position (relative to the beginning of preedit)
-    }
-
-    Q_SLOT void testPreeditActivationTyping()
-    {
-        QFETCH(QString, surrounding_text);
-        QFETCH(int, cursor_position);
-        QFETCH(QStringList, keys);
-        QFETCH(QString, expected_preedit_string);
-        QFETCH(int, expected_cursor_position);
-
-        SetupTest test_setup;
-        QScopedPointer<MImUpdateEvent> update_event(createUpdateEvent(surrounding_text,
-                                                                      cursor_position));
-
-        test_setup.notifier.notify(update_event.data());
-
-        Q_FOREACH (const QString &k, keys) {
-            test_setup.event_handler.onPressed(lookup(k));
-            test_setup.event_handler.onReleased(lookup(k));
-        }
-
-        TestUtils::waitForSignal(&test_setup.event_handler, SIGNAL(keyReleased(Key)));
-        QCOMPARE(test_setup.host.lastPreeditString(), expected_preedit_string);
-        QCOMPARE(test_setup.editor.text()->cursorPosition(), expected_cursor_position);
-    }
-};
-
-QTEST_MAIN(TestPreeditString)
-#include "main.moc"
diff --git a/maliit-keyboard/tests/preedit-string/preedit-string.cpp b/maliit-keyboard/tests/preedit-string/preedit-string.cpp
new file mode 100644
index 0000000..bdd43b3
--- /dev/null
+++ b/maliit-keyboard/tests/preedit-string/preedit-string.cpp
@@ -0,0 +1,619 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: Mohammad Anwari <Mohammad.Anwari@nokia.com>
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include "utils.h"
+
+#include "models/area.h"
+#include "models/key.h"
+#include "models/keyarea.h"
+#include "models/text.h"
+#include "models/layout.h"
+
+#include "logic/languagefeatures.h"
+#include "logic/layouthelper.h"
+#include "logic/layoutupdater.h"
+#include "logic/eventhandler.h"
+#include "logic/style.h"
+
+#include "plugin/editor.h"
+#include "plugin/updatenotifier.h"
+#include "inputmethodhostprobe.h"
+#include "wordengineprobe.h"
+
+#include <maliit/plugins/updateevent.h>
+
+#include <QtTest>
+#include <QtCore>
+#include <QtGui>
+
+using namespace MaliitKeyboard;
+Q_DECLARE_METATYPE(Logic::LayoutHelper::Orientation)
+Q_DECLARE_METATYPE(QList<QMouseEvent*>)
+
+namespace {
+const int g_size = 48;
+const int g_divider = 3;
+
+QPoint keyOriginLookup(const QString &name)
+{
+    static const int distance = g_size / g_divider;
+
+    if (name == "a") {
+        return QPoint(0, 0);
+    } else if (name == "b") {
+        return QPoint(distance, 0);
+    } else if (name == "c") {
+        return QPoint(0, distance);
+    } else if (name == "d") {
+        return QPoint(distance, distance);
+    } else if (name == "space") {
+        return QPoint(distance * 2, 0);
+    } else if (name == "return") {
+        return QPoint(distance * 2, distance);
+    }
+
+    return QPoint();
+}
+
+Key createKey(Key::Action action,
+              const QString &text)
+{
+    static const QSize size(g_size / g_divider, g_size / g_divider);
+
+    Key result;
+    result.setAction(action);
+    result.setOrigin(keyOriginLookup(text));
+    result.rArea().setSize(size);
+    result.rLabel().setText(text);
+
+    return result;
+}
+
+// Populate KeyArea with six keys, a, b, c, d, space and return. Notice how the KeyArea
+// covers the whole widget. Key width and height equals g_size / g_divider.
+// .-----------.
+// | a | b |<s>|
+// |---|---|---|
+// | c | d |<r>|
+// `-----------'
+KeyArea createAbcdArea()
+{
+    KeyArea key_area;
+    Area area;
+    area.setSize(QSize(g_size, g_size));
+    key_area.setArea(area);
+
+    key_area.rKeys().append(createKey(Key::ActionInsert, "a"));
+    key_area.rKeys().append(createKey(Key::ActionInsert, "b"));
+    key_area.rKeys().append(createKey(Key::ActionInsert, "c"));
+    key_area.rKeys().append(createKey(Key::ActionInsert, "d"));
+    key_area.rKeys().append(createKey(Key::ActionSpace,  "space"));
+    key_area.rKeys().append(createKey(Key::ActionReturn, "return"));
+
+    return key_area;
+}
+
+int lookup(const QString &name)
+{
+    if (name == "a") {
+        return 0;
+    } else if (name == "b") {
+        return 1;
+    } else if (name == "c") {
+        return 2;
+    } else if (name == "d") {
+        return 3;
+    } else if (name == "space") {
+        return 4;
+    } else if (name == "return") {
+        return 5;
+    }
+
+    return -1;
+}
+
+bool operator==(const Maliit::PreeditTextFormat &a, const Maliit::PreeditTextFormat &b) {
+    return ((a.start == b.start) and (a.length == b.length) and (a.preeditFace == b.preeditFace));
+}
+
+MImUpdateEvent *createUpdateEvent(const QString &surrounding_text,
+                                  int cursor_position)
+{
+    const char *const cur_pos("cursorPosition");
+    QStringList properties_changed(cur_pos);
+    QMap<QString, QVariant> update;
+
+    update.insert(cur_pos, cursor_position);
+    update.insert("surroundingText", surrounding_text);
+
+    return new MImUpdateEvent(update, properties_changed);
+}
+
+} // unnamed namespace
+
+struct BasicSetupTest
+{
+    BasicSetupTest(bool enable_word_engine = true)
+        : editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures, 0)
+        , host()
+        , notifier()
+    {
+        editor.setHost(&host);
+        editor.wordEngine()->setEnabled(enable_word_engine);
+
+        QObject::connect(&notifier, SIGNAL(cursorPositionChanged(int, QString)),
+                         &editor,   SLOT(onCursorPositionChanged(int, QString)));
+
+    }
+
+    Editor editor;
+    InputMethodHostProbe host;
+    UpdateNotifier notifier;
+};
+
+class SetupTest
+    : public BasicSetupTest
+{
+public:
+    Model::Layout layout;
+    Logic::LayoutUpdater layout_updater;
+    Logic::LayoutHelper layout_helper;
+    Logic::EventHandler event_handler;
+    SharedStyle style;
+    KeyArea key_area;
+
+    SetupTest(Logic::LayoutHelper::Orientation orientation = Logic::LayoutHelper::Landscape,
+              bool enable_word_engine = true)
+        : BasicSetupTest(enable_word_engine)
+        , layout()
+        , layout_updater()
+        , layout_helper()
+        , event_handler(&layout, &layout_updater)
+        , style(new Style(qApp))
+        , key_area(createAbcdArea())
+    {
+        // geometry stuff is usually done by maliit-server, so we need
+        // to do it manually here:
+        layout_helper.setOrientation(orientation);
+
+        Logic::connectEventHandlerToTextEditor(&event_handler, &editor);
+
+        layout_helper.setExtendedPanel(key_area);
+        layout_helper.setActivePanel(Logic::LayoutHelper::ExtendedPanel);
+
+        layout_updater.setLayout(&layout_helper);
+        layout_updater.setStyle(style);
+
+        layout.setKeyArea(key_area);
+    }
+};
+
+class TestPreeditString
+    : public QObject
+{
+    Q_OBJECT
+
+private:
+    typedef QList<Maliit::PreeditTextFormat> FormatList;
+
+    Q_SLOT void initTestCase()
+    {
+        qRegisterMetaType<QList<QMouseEvent*> >();
+        qRegisterMetaType<Logic::LayoutHelper::Orientation>();
+        qRegisterMetaType<FormatList>();
+    }
+
+    Q_SLOT void test_data()
+    {
+        QTest::addColumn<Logic::LayoutHelper::Orientation>("orientation");
+        QTest::addColumn<QStringList>("keys");
+        QTest::addColumn<QString>("expected_last_preedit_string");
+        QTest::addColumn<QString>("expected_commit_string");
+        QTest::addColumn<FormatList>("expected_preedit_format");
+        QTest::addColumn<bool>("word_engine_enabled");
+        QTest::addColumn<int>("expected_cursor_position");
+
+        for (int orientation = 0; orientation < 1; ++orientation) {
+            // FIXME: here should be 2          ^
+            // FIXME: tests fail for portrait layouts
+            const Logic::LayoutHelper::Orientation layout_orientation(orientation == 0
+                                                                ? Logic::LayoutHelper::Landscape
+                                                                : Logic::LayoutHelper::Portrait);
+            QTest::newRow("No mouse events: expect empty commit string, should be no preedit face")
+                << layout_orientation
+                << (QStringList())
+                << "" << "" << FormatList() << true << 0;
+
+            QTest::newRow("Only return pressed: expect empty commit string, should be no preedit face")
+                << layout_orientation
+                << (QStringList() << "return")
+                << "" << "" << FormatList() << true << 0;
+
+            QTest::newRow("Release button over key 'a': expect commit string 'a', preedit face should be active.")
+                << layout_orientation
+                << (QStringList() << "a" << "return")
+                << "a" << "a" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditActive)) << true << 0;
+
+            QTest::newRow("Release button over key 'a', but no commit: expect empty commit string.")
+                << layout_orientation
+                << (QStringList() << "a")
+                << "a" << "" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditActive)) << true << 1;
+
+            QTest::newRow("Release button over keys 'c, b, d, a': expect commit string 'cbda', preedit face should be no candidates")
+                << layout_orientation
+                << (QStringList() << "c" << "b" << "d" << "a" << "space")
+                << "cbda" << "cbda " << (FormatList() << Maliit::PreeditTextFormat(0, 4, Maliit::PreeditNoCandidates)) << true << 0;
+
+            QTest::newRow("Typing two words: expect commit string 'ab cd', with last preedit being 'cd', preedit face should be no candidates.")
+                << layout_orientation
+                << (QStringList() << "a" << "b" << "space" << "c" << "d" << "return")
+                << "cd" << "ab cd" << (FormatList() << Maliit::PreeditTextFormat(0, 2, Maliit::PreeditNoCandidates)) << true << 0;
+
+            QTest::newRow("Typing one word 'abd': expect commit string 'abd', with last preedit being 'abd', preedit face should be default")
+                << layout_orientation
+                << (QStringList() << "a" << "b" << "d" << "return")
+                << "abd" << "abd" << (FormatList() << Maliit::PreeditTextFormat(0, 3, Maliit::PreeditDefault)) << true << 0;
+
+            // TODO: we probably should not sent any preedit formats when word engine is turned off.
+            QTest::newRow("Typing one word 'abd' with word engine turned off: expect commit string 'abd', with preedit being last char, should be no preedit face")
+                << layout_orientation
+                << (QStringList() << "a" << "b" << "d")
+                << "d" << "abd" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditDefault)) << false << 0;
+
+            QTest::newRow("Typing one word 'ab' with word engine turned off: expect commit string 'ab', with preedit being last char, should be no preedit face")
+                << layout_orientation
+                << (QStringList() << "a" << "b")
+                << "b" << "ab" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditDefault)) << false << 0;
+
+            QTest::newRow("Typing one word 'bd' with word engine turned off: expect commit string 'bd', with preedit being last char, face should be for one char with default face")
+                << layout_orientation
+                << (QStringList() << "b" << "d")
+                << "d" << "bd" << (FormatList() << Maliit::PreeditTextFormat(0, 1, Maliit::PreeditDefault)) << false << 0;
+
+        }
+    }
+
+    Q_SLOT void test()
+    {
+        // FIXME: mikhas: We should have tests for the preedit &
+        // preedit correctness stuff, and how it blends with word
+        // prediction. I guess you will need to add
+        // WordEngine::setSpellChecker() API so that you can inject a
+        // fake spellchecker, for the tests. Otherwise, the test would
+        // have to be skipped when there's no hunspell/presage, which
+        // I wouldn't like to have.
+
+        QFETCH(Logic::LayoutHelper::Orientation, orientation);
+        QFETCH(QStringList, keys);
+        QFETCH(QString, expected_last_preedit_string);
+        QFETCH(QString, expected_commit_string);
+        QFETCH(QList<Maliit::PreeditTextFormat>, expected_preedit_format);
+        QFETCH(bool, word_engine_enabled);
+        QFETCH(int, expected_cursor_position);
+
+        SetupTest test_setup(orientation, word_engine_enabled);
+
+        Q_FOREACH (const QString &k, keys) {
+            test_setup.event_handler.onPressed(lookup(k));
+            test_setup.event_handler.onReleased(lookup(k));
+        }
+
+        TestUtils::waitForSignal(&test_setup.event_handler, SIGNAL(keyReleased(Key)));
+        QCOMPARE(test_setup.host.lastPreeditString(), expected_last_preedit_string);
+        QCOMPARE(test_setup.host.commitStringHistory(), expected_commit_string);
+        QCOMPARE(test_setup.host.lastPreeditTextFormatList(), expected_preedit_format);
+        QCOMPARE(test_setup.editor.text()->cursorPosition(), expected_cursor_position);
+    }
+
+    Q_SLOT void testPreeditActivation_data()
+    {
+        QTest::addColumn<QString>("surrounding_text");
+        QTest::addColumn<int>("cursor_position");
+        QTest::addColumn<QString>("expected_preedit");
+        QTest::addColumn<int>("expected_replace_start");
+        QTest::addColumn<int>("expected_replace_length");
+        QTest::addColumn<int>("expected_cursor_position");
+        QTest::addColumn<bool>("expected_preedit_string_sent");
+
+        QTest::newRow("'aaa bbb', select first 'a'")
+            << "aaa bbbb" // surrounding text
+            << 0 // chosen cursor position
+            << "aaa" // expected preedit
+            << 0 // expected replace start (relative to cursor position in a preedit)
+            << 3 // expected replace length
+            << 0 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("'aaa bbb', select second 'a'")
+            << "aaa bbbb" // surrounding text
+            << 1 // chosen cursor position
+            << "aaa" // expected preedit
+            << -1 // expected replace start (relative to cursor position in a preedit)
+            << 3 // expected replace length
+            << 1 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("'aaa bbb', select third 'a'")
+            << "aaa bbbb" // surrounding text
+            << 2 // chosen cursor position
+            << "aaa" // expected preedit
+            << -2 // expected replace start (relative to cursor position in a preedit)
+            << 3 // expected replace length
+            << 2 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("'aaa bbb', select space between words")
+            << "aaa bbbb" // surrounding text
+            << 3 // chosen cursor position
+            << "aaa" // expected preedit
+            << -3 // expected replace start (relative to cursor position in a preedit)
+            << 3 // expected replace length
+            << 3 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("'aaa bbb', select first 'b'")
+            << "aaa bbbb" // surrounding text
+            << 4 // chosen cursor position
+            << "bbbb" // expected preedit
+            << 0 // expected replace start (relative to cursor position in a preedit)
+            << 4 // expected replace length
+            << 0 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("'aaa bbb', select after last 'b'")
+            << "aaa bbbb" // surrounding text
+            << 8 // chosen cursor position
+            << "bbbb" // expected preedit
+            << -4 // expected replace start (relative to cursor position in a preedit)
+            << 4 // expected replace length
+            << 4 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("' aaa', select leading space")
+            << " aaa" // surrounding text
+            << 0 // chosen cursor position
+            << "" // expected preedit
+            << 0 // expected replace start (relative to cursor position in a preedit)
+            << 0 // expected replace length
+            << 0 // expected cursor position (relative to the beginning of preedit)
+            << false; // whether preedit is sent
+
+        QTest::newRow("'a  b', select space before 'b'")
+            << "a  b" // surrounding text
+            << 2 // chosen cursor position
+            << "" // expected preedit
+            << 0 // expected replace start (relative to cursor position in a preedit)
+            << 0 // expected replace length
+            << 0 // expected cursor position (relative to the beginning of preedit)
+            << false; // whether preedit is sent
+
+        QTest::newRow("'a  ', select last space")
+            << "a  " // surrounding text
+            << 2 // chosen cursor position
+            << "" // expected preedit
+            << 0 // expected replace start (relative to cursor position in a preedit)
+            << 0 // expected replace length
+            << 0 // expected cursor position (relative to the beginning of preedit)
+            << false; // whether preedit is sent
+
+        QTest::newRow("'a ', select after last space")
+            << "a " // surrounding text
+            << 2 // chosen cursor position
+            << "" // expected preedit
+            << 0 // expected replace start (relative to cursor position in a preedit)
+            << 0 // expected replace length
+            << 0 // expected cursor position (relative to the beginning of preedit)
+            << false; // whether preedit is sent
+
+        QTest::newRow("'aaa', select far after last char")
+            << "aaa" // surrounding text
+            << 200 // chosen cursor position
+            << "aaa" // expected preedit
+            << -3 // expected replace start (relative to cursor position in a preedit)
+            << 3 // expected replace length
+            << 3 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("'aaa', select far before first char")
+            << "aaa" // surrounding text
+            << -200 // chosen cursor position
+            << "aaa" // expected preedit
+            << 0 // expected replace start (relative to cursor position in a preedit)
+            << 3 // expected replace length
+            << 0 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+
+        QTest::newRow("' aaa ', select trailing space")
+            << " aaa " // surrounding text
+            << 4 // chosen cursor position
+            << "aaa" // expected preedit
+            << -3 // expected replace start (relative to cursor position in a preedit)
+            << 3 // expected replace length
+            << 3 // expected cursor position (relative to the beginning of preedit)
+            << true; // whether preedit is sent
+    }
+
+    Q_SLOT void testPreeditActivation()
+    {
+        QFETCH(QString, surrounding_text);
+        QFETCH(int, cursor_position);
+        QFETCH(QString, expected_preedit);
+        QFETCH(int, expected_replace_start);
+        QFETCH(int, expected_replace_length);
+        QFETCH(int, expected_cursor_position);
+        QFETCH(bool, expected_preedit_string_sent);
+
+        BasicSetupTest test_setup;
+        QScopedPointer<MImUpdateEvent> update_event(createUpdateEvent(surrounding_text,
+                                                                      cursor_position));
+
+        test_setup.notifier.notify(update_event.data());
+
+        QCOMPARE(test_setup.host.preeditStringSent(), expected_preedit_string_sent);
+        if (expected_preedit_string_sent) {
+            QCOMPARE(test_setup.host.lastPreeditString(), expected_preedit);
+            QCOMPARE(test_setup.host.lastReplaceStart(), expected_replace_start);
+            QCOMPARE(test_setup.host.lastReplaceLength(), expected_replace_length);
+            QCOMPARE(test_setup.host.lastCursorPos(), expected_cursor_position);
+        }
+        QCOMPARE(test_setup.editor.text()->preedit(), expected_preedit);
+        QCOMPARE(test_setup.editor.text()->cursorPosition(), expected_cursor_position);
+    }
+
+    Q_SLOT void testPreeditActivationTyping_data()
+    {
+        QTest::addColumn<QString>("surrounding_text");
+        QTest::addColumn<int>("cursor_position");
+        QTest::addColumn<QStringList >("keys");
+        QTest::addColumn<QString>("expected_preedit_string");
+        QTest::addColumn<int>("expected_cursor_position");
+
+        QTest::newRow("'aaa bbb', select first 'a', then type 'd'")
+            << "aaa bbbb" // surrounding text
+            << 0 // chosen cursor position
+            << (QStringList() << "d")
+            << "daaa" // expected preedit
+            << 1; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'aaa bbb', select second 'a', then type 'd'")
+            << "aaa bbbb" // surrounding text
+            << 1 // chosen cursor position
+            << (QStringList() << "d")
+            << "adaa" // expected preedit
+            << 2; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'aaa bbb', select third 'a', then type 'd'")
+            << "aaa bbbb" // surrounding text
+            << 2 // chosen cursor position
+            << (QStringList() << "d")
+            << "aada" // expected preedit
+            << 3; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'aaa bbb', select space between words, then type 'd'")
+            << "aaa bbbb" // surrounding text
+            << 3 // chosen cursor position
+            << (QStringList() << "d")
+            << "aaad" // expected preedit
+            << 4; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'aaa bbb', select first 'b', then type 'd'")
+            << "aaa bbbb" // surrounding text
+            << 4 // chosen cursor position
+            << (QStringList() << "d")
+            << "dbbbb" // expected preedit
+            << 1; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'aaa bbb', select after last 'b', then type 'd'")
+            << "aaa bbbb" // surrounding text
+            << 8 // chosen cursor position
+            << (QStringList() << "d")
+            << "bbbbd" // expected preedit
+            << 5; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("' aaa', select leading space, then type 'd'")
+            << " aaa" // surrounding text
+            << 0 // chosen cursor position
+            << (QStringList() << "d")
+            << "d" // expected preedit
+            << 1; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'a  b', select space before 'b', then type 'd'")
+            << "a  b" // surrounding text
+            << 2 // chosen cursor position
+            << (QStringList() << "d")
+            << "d" // expected preedit
+            << 1; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'a  ', select last space, then type 'd'")
+            << "a  " // surrounding text
+            << 2 // chosen cursor position
+            << (QStringList() << "d")
+            << "d" // expected preedit
+            << 1; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'a ', select after last space, then type 'd'")
+            << "a " // surrounding text
+            << 2 // chosen cursor position
+            << (QStringList() << "d")
+            << "d" // expected preedit
+            << 1; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'aaa', select far after last char, then type 'd'")
+            << "aaa" // surrounding text
+            << 200 // chosen cursor position
+            << (QStringList() << "d")
+            << "aaad" // expected preedit
+            << 4; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("'aaa', select far before first char, then type 'd'")
+            << "aaa" // surrounding text
+            << -200 // chosen cursor position
+            << (QStringList() << "d")
+            << "daaa" // expected preedit
+            << 1; // expected cursor position (relative to the beginning of preedit)
+
+        QTest::newRow("' aaa ', select trailing space, then type 'd'")
+            << " aaa " // surrounding text
+            << 4 // chosen cursor position
+            << (QStringList() << "d")
+            << "aaad" // expected preedit
+            << 4; // expected cursor position (relative to the beginning of preedit)
+    }
+
+    Q_SLOT void testPreeditActivationTyping()
+    {
+        QFETCH(QString, surrounding_text);
+        QFETCH(int, cursor_position);
+        QFETCH(QStringList, keys);
+        QFETCH(QString, expected_preedit_string);
+        QFETCH(int, expected_cursor_position);
+
+        SetupTest test_setup;
+        QScopedPointer<MImUpdateEvent> update_event(createUpdateEvent(surrounding_text,
+                                                                      cursor_position));
+
+        test_setup.notifier.notify(update_event.data());
+
+        Q_FOREACH (const QString &k, keys) {
+            test_setup.event_handler.onPressed(lookup(k));
+            test_setup.event_handler.onReleased(lookup(k));
+        }
+
+        TestUtils::waitForSignal(&test_setup.event_handler, SIGNAL(keyReleased(Key)));
+        QCOMPARE(test_setup.host.lastPreeditString(), expected_preedit_string);
+        QCOMPARE(test_setup.editor.text()->cursorPosition(), expected_cursor_position);
+    }
+};
+
+QTEST_MAIN(TestPreeditString)
+
+#include "preedit-string.moc"
diff --git a/maliit-keyboard/tests/preedit-string/preedit-string.pro b/maliit-keyboard/tests/preedit-string/preedit-string.pro
deleted file mode 100644
index 32cd78a..0000000
--- a/maliit-keyboard/tests/preedit-string/preedit-string.pro
+++ /dev/null
@@ -1,25 +0,0 @@
-include(../../config.pri)
-include(../common-check.pri)
-include(../../config-plugin.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../../..
-TARGET = preedit-string
-TEMPLATE = app
-QT = core testlib gui
-
-!contains(QT_MAJOR_VERSION, 4) {
-    QT += widgets
-}
-
-INCLUDEPATH += ../../lib ../../
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-HEADERS += \
-    wordengineprobe.h
-
-SOURCES += \
-    main.cpp \
-    wordengineprobe.cpp
-
-include(../../word-prediction.pri)
diff --git a/maliit-keyboard/tests/repeat-backspace/main.cpp b/maliit-keyboard/tests/repeat-backspace/main.cpp
deleted file mode 100644
index 1725456..0000000
--- a/maliit-keyboard/tests/repeat-backspace/main.cpp
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: Mohammad Anwari <Mohammad.Anwari@nokia.com>
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include "utils.h"
-#include "models/key.h"
-#include "models/text.h"
-#include "logic/languagefeatures.h"
-#include "logic/wordengine.h"
-#include "plugin/editor.h"
-
-#include <inputmethodhostprobe.h>
-
-#include <QtCore>
-#include <QtTest>
-
-using namespace MaliitKeyboard;
-
-typedef void (Editor::*Method)(const Key &key);
-
-Q_DECLARE_METATYPE(Method);
-
-// This test suite verifies how Editor implements auto-repeat for backspace key
-class TestRepeatBackspace
-    : public QObject
-{
-    Q_OBJECT
-
-private:
-    QScopedPointer<Editor> editor;
-    QScopedPointer<InputMethodHostProbe> host;
-    int delay;
-    int auto_repeat_delay;
-    int auto_repeat_interval;
-
-    Q_SLOT void initTestCase()
-    {
-        auto_repeat_delay = 50;
-        auto_repeat_interval = 20;
-
-        delay = qMax(auto_repeat_delay, auto_repeat_interval) + 10;
-    }
-
-    Q_SLOT void init()
-    {
-        editor.reset(new Editor(new Model::Text, new Logic::WordEngine, new Logic::LanguageFeatures));
-        editor->setAutoRepeatBehaviour(auto_repeat_delay, auto_repeat_interval);
-        host.reset(new InputMethodHostProbe);
-        editor->setHost(host.data());
-    }
-
-    Q_SLOT void cleanup()
-    {
-        editor.reset();
-        host.reset();
-    }
-
-    /*
-     * testClick verifies following scenario:
-     * 1) press (or move finger into) backspace key
-     * 2) release key without delay
-     * At this point we should send exactly one key event
-     * and auto-repeat should not be triggered
-     */
-    Q_SLOT void testClick_data()
-    {
-        QTest::addColumn<Method>("initiate");
-
-        Method enter = &Editor::onKeyEntered;
-        Method press = &Editor::onKeyPressed;
-
-        QTest::newRow("enter") << enter;
-        QTest::newRow("press") << press;
-    }
-
-    Q_SLOT void testClick()
-    {
-        QFETCH(Method, initiate);
-
-        Key backspace;
-        backspace.setAction(Key::ActionBackspace);
-
-        (editor.data()->*initiate)(backspace);
-        editor->onKeyReleased(backspace);
-
-        QCOMPARE(host->keyEventCount(), 1);
-        QCOMPARE(host->lastKeyEvent().type(), QEvent::KeyPress);
-        QCOMPARE(host->lastKeyEvent().key(), int(Qt::Key_Backspace));
-
-        QTest::qWait(delay);
-
-        QCOMPARE(host->keyEventCount(), 1);
-    }
-
-    /*
-     * testFastMove verifies following scenario:
-     * 1) press (or move finger into) backspace key
-     * 2) move finger to another key without delay
-     * At this point we should not send key events at all.
-     */
-    Q_SLOT void testFastMove_data()
-    {
-        QTest::addColumn<Method>("initiate");
-
-        Method enter = &Editor::onKeyEntered;
-        Method press = &Editor::onKeyPressed;
-
-        QTest::newRow("enter") << enter;
-        QTest::newRow("press") << press;
-    }
-
-    Q_SLOT void testFastMove()
-    {
-        QFETCH(Method, initiate);
-
-        Key backspace;
-        backspace.setAction(Key::ActionBackspace);
-
-        (editor.data()->*initiate)(backspace);
-        editor->onKeyExited(backspace);
-
-        QCOMPARE(host->keyEventCount(), 0);
-
-        QTest::qWait(delay);
-
-        QCOMPARE(host->keyEventCount(), 0);
-    }
-
-    /*
-     * testRepeat verifies main scenario for auto repeat:
-     * 1) press (or move finger into) backspace key
-     * 2) wait a bit, so autorepeat starts
-     * 3) we should send first key event now
-     * 4) wait again
-     * 5) auto-repeat send second event with different delay
-     * 3) release (or move finger away from) backspace key
-     * Auto-repeat should be stopped now and no new events will be sent
-     * even after delay.
-     */
-    Q_SLOT void testRepeat_data()
-    {
-        QTest::addColumn<Method>("initiate");
-        QTest::addColumn<Method>("finalize");
-
-        Method enter = &Editor::onKeyEntered;
-        Method exit = &Editor::onKeyExited;
-        Method press = &Editor::onKeyPressed;
-        Method release = &Editor::onKeyReleased;
-
-        QTest::newRow("enter-exit")    << enter << exit;
-        QTest::newRow("enter-release") << enter << release;
-        QTest::newRow("press-release") << press << release;
-        QTest::newRow("press-exit")    << press << exit;
-    }
-
-    Q_SLOT void testRepeat()
-    {
-        QFETCH(Method, initiate);
-        QFETCH(Method, finalize);
-
-        Key backspace;
-        backspace.setAction(Key::ActionBackspace);
-
-        (editor.data()->*initiate)(backspace);
-
-        QCOMPARE(host->keyEventCount(), 0);
-
-        QTest::qWait(auto_repeat_delay + 10);
-
-        QCOMPARE(host->keyEventCount(), 1);
-        QCOMPARE(host->lastKeyEvent().type(), QEvent::KeyPress);
-        QCOMPARE(host->lastKeyEvent().key(), int(Qt::Key_Backspace));
-
-        QTest::qWait(auto_repeat_interval + 10);
-
-        QCOMPARE(host->keyEventCount(), 2);
-        QCOMPARE(host->lastKeyEvent().type(), QEvent::KeyPress);
-        QCOMPARE(host->lastKeyEvent().key(), int(Qt::Key_Backspace));
-
-        (editor.data()->*finalize)(backspace);
-
-        QTest::qWait(delay);
-
-        QCOMPARE(host->keyEventCount(), 2);
-    }
-
-};
-
-QTEST_MAIN(TestRepeatBackspace)
-
-#include "main.moc"
diff --git a/maliit-keyboard/tests/repeat-backspace/repeat-backspace.cpp b/maliit-keyboard/tests/repeat-backspace/repeat-backspace.cpp
new file mode 100644
index 0000000..7a73aeb
--- /dev/null
+++ b/maliit-keyboard/tests/repeat-backspace/repeat-backspace.cpp
@@ -0,0 +1,219 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). All rights reserved.
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: Mohammad Anwari <Mohammad.Anwari@nokia.com>
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include "utils.h"
+#include "models/key.h"
+#include "models/text.h"
+#include "logic/languagefeatures.h"
+#include "logic/wordengine.h"
+#include "plugin/editor.h"
+
+#include <inputmethodhostprobe.h>
+
+#include <QtCore>
+#include <QtTest>
+
+using namespace MaliitKeyboard;
+
+typedef void (Editor::*Method)(const Key &key);
+
+Q_DECLARE_METATYPE(Method);
+
+// This test suite verifies how Editor implements auto-repeat for backspace key
+class TestRepeatBackspace
+    : public QObject
+{
+    Q_OBJECT
+
+private:
+    QScopedPointer<Editor> editor;
+    QScopedPointer<InputMethodHostProbe> host;
+    int delay;
+    int auto_repeat_delay;
+    int auto_repeat_interval;
+
+    Q_SLOT void initTestCase()
+    {
+        auto_repeat_delay = 50;
+        auto_repeat_interval = 20;
+
+        delay = qMax(auto_repeat_delay, auto_repeat_interval) + 10;
+    }
+
+    Q_SLOT void init()
+    {
+        editor.reset(new Editor(new Model::Text, new Logic::WordEngine, new Logic::LanguageFeatures));
+        editor->setAutoRepeatBehaviour(auto_repeat_delay, auto_repeat_interval);
+        host.reset(new InputMethodHostProbe);
+        editor->setHost(host.data());
+    }
+
+    Q_SLOT void cleanup()
+    {
+        editor.reset();
+        host.reset();
+    }
+
+    /*
+     * testClick verifies following scenario:
+     * 1) press (or move finger into) backspace key
+     * 2) release key without delay
+     * At this point we should send exactly one key event
+     * and auto-repeat should not be triggered
+     */
+    Q_SLOT void testClick_data()
+    {
+        QTest::addColumn<Method>("initiate");
+
+        Method enter = &Editor::onKeyEntered;
+        Method press = &Editor::onKeyPressed;
+
+        QTest::newRow("enter") << enter;
+        QTest::newRow("press") << press;
+    }
+
+    Q_SLOT void testClick()
+    {
+        QFETCH(Method, initiate);
+
+        Key backspace;
+        backspace.setAction(Key::ActionBackspace);
+
+        (editor.data()->*initiate)(backspace);
+        editor->onKeyReleased(backspace);
+
+        QCOMPARE(host->keyEventCount(), 1);
+        QCOMPARE(host->lastKeyEvent().type(), QEvent::KeyPress);
+        QCOMPARE(host->lastKeyEvent().key(), int(Qt::Key_Backspace));
+
+        QTest::qWait(delay);
+
+        QCOMPARE(host->keyEventCount(), 1);
+    }
+
+    /*
+     * testFastMove verifies following scenario:
+     * 1) press (or move finger into) backspace key
+     * 2) move finger to another key without delay
+     * At this point we should not send key events at all.
+     */
+    Q_SLOT void testFastMove_data()
+    {
+        QTest::addColumn<Method>("initiate");
+
+        Method enter = &Editor::onKeyEntered;
+        Method press = &Editor::onKeyPressed;
+
+        QTest::newRow("enter") << enter;
+        QTest::newRow("press") << press;
+    }
+
+    Q_SLOT void testFastMove()
+    {
+        QFETCH(Method, initiate);
+
+        Key backspace;
+        backspace.setAction(Key::ActionBackspace);
+
+        (editor.data()->*initiate)(backspace);
+        editor->onKeyExited(backspace);
+
+        QCOMPARE(host->keyEventCount(), 0);
+
+        QTest::qWait(delay);
+
+        QCOMPARE(host->keyEventCount(), 0);
+    }
+
+    /*
+     * testRepeat verifies main scenario for auto repeat:
+     * 1) press (or move finger into) backspace key
+     * 2) wait a bit, so autorepeat starts
+     * 3) we should send first key event now
+     * 4) wait again
+     * 5) auto-repeat send second event with different delay
+     * 3) release (or move finger away from) backspace key
+     * Auto-repeat should be stopped now and no new events will be sent
+     * even after delay.
+     */
+    Q_SLOT void testRepeat_data()
+    {
+        QTest::addColumn<Method>("initiate");
+        QTest::addColumn<Method>("finalize");
+
+        Method enter = &Editor::onKeyEntered;
+        Method exit = &Editor::onKeyExited;
+        Method press = &Editor::onKeyPressed;
+        Method release = &Editor::onKeyReleased;
+
+        QTest::newRow("enter-exit")    << enter << exit;
+        QTest::newRow("enter-release") << enter << release;
+        QTest::newRow("press-release") << press << release;
+        QTest::newRow("press-exit")    << press << exit;
+    }
+
+    Q_SLOT void testRepeat()
+    {
+        QFETCH(Method, initiate);
+        QFETCH(Method, finalize);
+
+        Key backspace;
+        backspace.setAction(Key::ActionBackspace);
+
+        (editor.data()->*initiate)(backspace);
+
+        QCOMPARE(host->keyEventCount(), 0);
+
+        QTest::qWait(auto_repeat_delay + 15);
+
+        QCOMPARE(host->keyEventCount(), 1);
+        QCOMPARE(host->lastKeyEvent().type(), QEvent::KeyPress);
+        QCOMPARE(host->lastKeyEvent().key(), int(Qt::Key_Backspace));
+
+        QTest::qWait(auto_repeat_interval);
+
+        QCOMPARE(host->keyEventCount(), 2);
+        QCOMPARE(host->lastKeyEvent().type(), QEvent::KeyPress);
+        QCOMPARE(host->lastKeyEvent().key(), int(Qt::Key_Backspace));
+
+        (editor.data()->*finalize)(backspace);
+
+        QTest::qWait(delay);
+
+        QCOMPARE(host->keyEventCount(), 2);
+    }
+
+};
+
+QTEST_MAIN(TestRepeatBackspace)
+
+#include "repeat-backspace.moc"
diff --git a/maliit-keyboard/tests/repeat-backspace/repeat-backspace.pro b/maliit-keyboard/tests/repeat-backspace/repeat-backspace.pro
deleted file mode 100644
index b5d7f32..0000000
--- a/maliit-keyboard/tests/repeat-backspace/repeat-backspace.pro
+++ /dev/null
@@ -1,19 +0,0 @@
-include(../../config.pri)
-include(../common-check.pri)
-include(../../config-plugin.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../../..
-TARGET = repeat-backspace
-TEMPLATE = app
-QT = core testlib gui
-
-INCLUDEPATH += ../../lib ../../
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-HEADERS += \
-
-SOURCES += \
-    main.cpp \
-
-include(../../word-prediction.pri)
diff --git a/maliit-keyboard/tests/tests.pro b/maliit-keyboard/tests/tests.pro
deleted file mode 100644
index afc96d7..0000000
--- a/maliit-keyboard/tests/tests.pro
+++ /dev/null
@@ -1,14 +0,0 @@
-TEMPLATE = subdirs
-SUBDIRS = \
-    common \
-    editor \
-    language-layout-switching \
-    preedit-string \
-    repeat-backspace \
-    word-candidates \
-    language-layout-loading \
-
-CONFIG += ordered
-QMAKE_EXTRA_TARGETS += check
-check.target = check
-check.CONFIG = recursive
diff --git a/maliit-keyboard/tests/ut_editor/.gitignore b/maliit-keyboard/tests/ut_editor/.gitignore
new file mode 100644
index 0000000..85042ac
--- /dev/null
+++ b/maliit-keyboard/tests/ut_editor/.gitignore
@@ -0,0 +1 @@
+editor
diff --git a/maliit-keyboard/tests/ut_editor/ut_editor.cpp b/maliit-keyboard/tests/ut_editor/ut_editor.cpp
new file mode 100644
index 0000000..24f4ab9
--- /dev/null
+++ b/maliit-keyboard/tests/ut_editor/ut_editor.cpp
@@ -0,0 +1,211 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: maliit-discuss@lists.maliit.org
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *maliit-keyboard
+ *
+ */
+
+#include "utils.h"
+#include "wordengineprobe.h"
+#include "common/inputmethodhostprobe.h"
+
+#include "plugin/editor.h"
+#include "models/key.h"
+#include "models/text.h"
+#include "logic/languagefeatures.h"
+#include "logic/layouthelper.h"
+#include "logic/layoutupdater.h"
+#include "logic/style.h"
+
+#include <QtCore>
+#include <QtTest>
+
+using namespace MaliitKeyboard;
+
+Q_DECLARE_METATYPE(WordCandidateList)
+
+namespace {
+    void initializeWordEngine(Logic::WordEngineProbe *word_engine)
+    {
+        word_engine->addSpellingCandidate(QString("He"), QString("Hello"));
+        word_engine->addSpellingCandidate(QString("Hel"), QString("Hello"));
+        word_engine->addSpellingCandidate(QString("Helo"), QString("Hello"));
+        word_engine->addSpellingCandidate(QString("Helol"), QString("Hello"));
+        word_engine->addSpellingCandidate(QString("Hello"), QString("Hello"));
+        word_engine->addSpellingCandidate(QString("Wo"), QString("World"));
+        word_engine->addSpellingCandidate(QString("Wor"), QString("World"));
+        word_engine->addSpellingCandidate(QString("Word"), QString("World"));
+        word_engine->addSpellingCandidate(QString("Wordl"), QString("World"));
+        word_engine->addSpellingCandidate(QString("World"), QString("World"));
+    }
+
+    void appendInput(Editor *editor, const QString &input)
+    {
+        Q_FOREACH(const QChar &c, input) {
+            Key key;
+            if (c.isSpace()) {
+                key.setAction(Key::ActionSpace);
+            } else {
+                key.setAction(Key::ActionInsert);
+                key.rLabel().setText(QString(c));
+            }
+            editor->onKeyPressed(key);
+            editor->onKeyReleased(key);
+        }
+    }
+
+} // namespace
+
+class TestEditor
+    : public QObject
+{
+    Q_OBJECT
+
+private:
+    Q_SLOT void initTestCase()
+    {
+        qRegisterMetaType<WordCandidateList>("WordCandidateList");
+    }
+
+    Q_SLOT void testAutoCorrect_data()
+    {
+        QTest::addColumn<bool>("enable_auto_correct");
+        QTest::addColumn<QString>("input");
+        QTest::addColumn<QString>("expected_commit_history");
+
+        QTest::newRow("auto-correct disabled")
+                << false << "Helol Wordl! " << "Helol Wordl! ";
+        QTest::newRow("auto-correct disabled, multiple punctation")
+                << false << "Helol Wordl!! " << "Helol Wordl!! ";
+        QTest::newRow("auto-correct disabled, digits")
+                << false << "Helol Wordl12 " << "Helol Wordl12 ";
+        QTest::newRow("auto-correct enabled")
+                << true << "Helol Wordl! " << "Hello World! ";
+        QTest::newRow("auto-correct enabled, multiple punctation")
+                << true << "Helol Wordl!! " << "Hello World!! ";
+    }
+
+    Q_SLOT void testAutoCorrect()
+    {
+        QFETCH(bool, enable_auto_correct);
+        QFETCH(QString, input);
+        QFETCH(QString, expected_commit_history);
+
+        Logic::WordEngineProbe *word_engine = new Logic::WordEngineProbe;
+        Editor editor(new Model::Text, word_engine, new Logic::LanguageFeatures);
+
+        InputMethodHostProbe host;
+        editor.setHost(&host);
+
+        initializeWordEngine(word_engine);
+
+        editor.wordEngine()->setEnabled(true);
+        editor.setAutoCorrectEnabled(enable_auto_correct);
+        editor.setPreeditEnabled(true);
+        editor.setAutoCapsEnabled(true);
+
+        appendInput(&editor, input);
+
+        QCOMPARE(host.commitStringHistory(), expected_commit_history);
+    }
+
+    Q_SLOT void testAutoCaps_data()
+    {
+        QTest::addColumn<bool>("enable_auto_correct");
+        QTest::addColumn<QString>("input");
+        QTest::addColumn<QString>("expected_commit_history");
+        QTest::addColumn<int>("expected_auto_caps_activated_count");
+
+        QTest::newRow("auto-correct disabled, no punctation")
+                << false << "Helol Wordl " << "Helol Wordl " << 0;
+        QTest::newRow("auto-correct enabled, no punctation")
+                << true << "Helol Wordl " << "Hello World " << 0;
+        QTest::newRow("auto-correct disabled, dot")
+                << false << "Helol Wordl. " << "Helol Wordl. " << 1;
+        QTest::newRow("auto-correct enabled, dot")
+                << true << "Helol Wordl. " << "Hello World. " << 1;
+        QTest::newRow("auto-correct disabled, excalamation mark")
+                << false << "Helol Wordl! " << "Helol Wordl! " << 1;
+        QTest::newRow("auto-correct enabled, excalamation mark")
+                << true << "Helol Wordl! " << "Hello World! " << 1;
+        QTest::newRow("auto-correct disabled, multiple dots")
+                << false << "Helol Wordl... " << "Helol Wordl... " << 1;
+        QTest::newRow("auto-correct enabled, multiple dots")
+                << true << "Helol Wordl... " << "Hello World... " << 1;
+        QTest::newRow("auto-correct disabled, comma")
+                << false << "Helol Wordl, " << "Helol Wordl, " << 0;
+        QTest::newRow("auto-correct enabled, comma")
+                << true << "Helol Wordl, " << "Hello World, " << 0;
+        QTest::newRow("auto-correct disabled, quotation mark")
+                << false << "Helol Wordl\" " << "Helol Wordl\" " << 0;
+        QTest::newRow("auto-correct enabled, quotation mark")
+                << true << "Helol Wordl\" " << "Hello World\" " << 0;
+        QTest::newRow("auto-correct disabled, multiple sentences with mixed punctation")
+                << false << "This is a \"first sentence\". And a second, one! "
+                << "This is a \"first sentence\". And a second, one! " << 2;
+        QTest::newRow("auto-correct enabled, multiple sentences with mixed punctation")
+                << true << "This is a \"first sentence\". And a second, one! "
+                << "This is a \"first sentence\". And a second, one! " << 2;
+        QTest::newRow("auto-correct disabled, multiple sentences with dots")
+                << false << "First sentence. Second one. And Third. "
+                << "First sentence. Second one. And Third. " << 3;
+        QTest::newRow("auto-correct enabled, multiple sentences with dots")
+                << true << "First sentence. Second one. And Third. "
+                << "First sentence. Second one. And Third. " << 3;
+    }
+
+    Q_SLOT void testAutoCaps()
+    {
+        QFETCH(bool, enable_auto_correct);
+        QFETCH(QString, input);
+        QFETCH(QString, expected_commit_history);
+        QFETCH(int, expected_auto_caps_activated_count);
+
+        Logic::WordEngineProbe *word_engine = new Logic::WordEngineProbe;
+        Editor editor(new Model::Text, word_engine, new Logic::LanguageFeatures);
+        QSignalSpy auto_caps_activated_spy(&editor, SIGNAL(autoCapsActivated()));
+
+        InputMethodHostProbe host;
+        editor.setHost(&host);
+
+        initializeWordEngine(word_engine);
+
+        editor.wordEngine()->setEnabled(true);
+        editor.setAutoCorrectEnabled(enable_auto_correct);
+        editor.setPreeditEnabled(true);
+        editor.setAutoCapsEnabled(true);
+
+        appendInput(&editor, input);
+
+        QCOMPARE(host.commitStringHistory(), expected_commit_history);
+        QCOMPARE(auto_caps_activated_spy.count(), expected_auto_caps_activated_count);
+    }
+};
+
+QTEST_MAIN(TestEditor)
+#include "ut_editor.moc"
diff --git a/maliit-keyboard/tests/ut_editor/wordengineprobe.cpp b/maliit-keyboard/tests/ut_editor/wordengineprobe.cpp
new file mode 100644
index 0000000..c95ed86
--- /dev/null
+++ b/maliit-keyboard/tests/ut_editor/wordengineprobe.cpp
@@ -0,0 +1,76 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: maliit-discuss@lists.maliit.org
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include "wordengineprobe.h"
+
+namespace MaliitKeyboard {
+namespace Logic {
+
+//! \class WordEngineProbe
+//! A word engine that deterministcally predicts word candidates, in such a
+//! way that it can be used for tests. Does not require Hunspell or Presage.
+
+
+//! \param parent The owner of this instance (optional).
+WordEngineProbe::WordEngineProbe(QObject *parent)
+    : AbstractWordEngine(parent)
+    , candidates()
+{}
+
+
+WordEngineProbe::~WordEngineProbe()
+{}
+
+void WordEngineProbe::addSpellingCandidate(const QString &text,
+                                           const QString &word)
+{
+    candidates.insert(text, word);
+}
+
+//! \brief Returns new candidates.
+//! \param text Preedit of text model is reversed and emitted as only word
+//!             candidate. Special characters (e.g., punctuation) are skipped.
+WordCandidateList WordEngineProbe::fetchCandidates(Model::Text *text)
+{
+    WordCandidateList result;
+
+    QHash<QString, QString>::const_iterator candidate = candidates.constFind(text->preedit());
+    if (candidate != candidates.constEnd()) {
+        text->setPrimaryCandidate(candidate.value());
+
+        WordCandidate word_candidate(WordCandidate::SourceSpellChecking, candidate.value());
+        result.append(word_candidate);
+    }
+
+    return result;
+}
+
+}} // namespace MaliitKeyboard
diff --git a/maliit-keyboard/tests/ut_editor/wordengineprobe.h b/maliit-keyboard/tests/ut_editor/wordengineprobe.h
new file mode 100644
index 0000000..1a0a5a3
--- /dev/null
+++ b/maliit-keyboard/tests/ut_editor/wordengineprobe.h
@@ -0,0 +1,61 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: maliit-discuss@lists.maliit.org
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef MALIIT_KEYBOARD_WORDENGINEPROBE_H
+#define MALIIT_KEYBOARD_WORDENGINEPROBE_H
+
+#include "logic/abstractwordengine.h"
+#include <QtCore>
+
+namespace MaliitKeyboard {
+namespace Logic {
+
+class WordEngineProbe
+    : public AbstractWordEngine
+{
+    Q_OBJECT
+    Q_DISABLE_COPY(WordEngineProbe)
+
+public:
+    explicit WordEngineProbe(QObject *parent = 0);
+    virtual ~WordEngineProbe();
+
+    void addSpellingCandidate(const QString &text, const QString &word);
+
+private:
+    virtual WordCandidateList fetchCandidates(Model::Text *text);
+
+    QHash<QString, QString> candidates;
+};
+
+}} // namespace MaliitKeyboard
+
+#endif // MALIIT_KEYBOARD_WORDENGINEPROBE_H
diff --git a/maliit-keyboard/tests/word-candidates/main.cpp b/maliit-keyboard/tests/word-candidates/main.cpp
deleted file mode 100644
index 4bb99e3..0000000
--- a/maliit-keyboard/tests/word-candidates/main.cpp
+++ /dev/null
@@ -1,243 +0,0 @@
-/*
- * This file is part of Maliit Plugins
- *
- * Copyright (C) 2012-2013 Canonical Ltd
- *
- * Contact: maliit-discuss@lists.maliit.org
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * Redistributions of source code must retain the above copyright notice, this list
- * of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list
- * of conditions and the following disclaimer in the documentation and/or other materials
- * provided with the distribution.
- * Neither the name of Nokia Corporation nor the names of its contributors may be
- * used to endorse or promote products derived from this software without specific
- * prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include "utils.h"
-#include "wordengineprobe.h"
-#include "common/inputmethodhostprobe.h"
-
-#include "plugin/editor.h"
-#include "models/key.h"
-#include "models/text.h"
-#include "logic/languagefeatures.h"
-#include "logic/layouthelper.h"
-#include "logic/layoutupdater.h"
-#include "logic/style.h"
-
-#include <QtCore>
-#include <QtTest>
-
-using namespace MaliitKeyboard;
-
-Q_DECLARE_METATYPE(WordCandidateList)
-
-namespace {
-
-void appendToPreedit(Editor *editor,
-                     const QString &appendix)
-{
-    Key k;
-    QCOMPARE(k.action(), Key::ActionInsert);
-
-    k.rLabel().setText(appendix);
-    editor->onKeyReleased(k);
-}
-
-
-void enforceCommit(Editor *editor)
-{
-    Key space;
-    space.setAction(Key::ActionSpace);
-    editor->onKeyReleased(space);
-}
-
-} // namespace
-
-class TestWordCandidates
-    : public QObject
-{
-    Q_OBJECT
-
-private:
-    Q_SLOT void initTestCase()
-    {
-        qRegisterMetaType<WordCandidateList>("WordCandidateList");
-    }
-
-    Q_SLOT void testPrediction_data()
-    {
-        QTest::addColumn<bool>("enable_preedit");
-        QTest::addColumn<bool>("enable_auto_correct");
-        QTest::addColumn<QString>("preedit");
-        QTest::addColumn<int>("expected_word_candidate_updates");
-        QTest::addColumn<QString>("expected_word_candidate");
-        QTest::addColumn<QString>("expected_commit_history");
-
-        QTest::newRow("preedit enabled")
-                << true << false << "preedit" << 7 << "tideerp" << "preedit ";
-
-        QTest::newRow("preedit + auto-correct enabled")
-                << true << true << "preedit" << 7 << "tideerp" << "tideerp ";
-
-        QTest::newRow("punctuated preedit + auto-correct enabled")
-                << true << true << "preedit." << 7 << "tideerp" << "tideerp. ";
-
-        QTest::newRow("preedit + auto-correct disabled")
-                << false << false << "commit" << 0 << "" << "commit ";
-
-        QTest::newRow("preedit disabled, auto-correct enabled")
-                << false << true << "commit" << 0 << "" << "commit ";
-    }
-
-    Q_SLOT void testPrediction()
-    {
-        QFETCH(bool, enable_preedit);
-        QFETCH(bool, enable_auto_correct);
-        QFETCH(QString, preedit);
-        QFETCH(int, expected_word_candidate_updates);
-        QFETCH(QString, expected_word_candidate);
-        QFETCH(QString, expected_commit_history);
-
-        Editor editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures);
-        QSignalSpy spy(&editor, SIGNAL(wordCandidatesChanged(WordCandidateList)));
-        QSignalSpy preedit_enabled_spy(&editor, SIGNAL(preeditEnabledChanged(bool)));
-        QSignalSpy auto_correct_enabled_spy(&editor, SIGNAL(autoCorrectEnabledChanged(bool)));
-
-        InputMethodHostProbe host;
-        editor.setHost(&host);
-
-        QVERIFY(not editor.isPreeditEnabled());
-        editor.wordEngine()->setEnabled(enable_preedit);
-        QCOMPARE(preedit_enabled_spy.count(), enable_preedit ? 1 : 0);
-        QCOMPARE(editor.isPreeditEnabled(), enable_preedit);
-
-        QVERIFY(not editor.isAutoCorrectEnabled());
-        editor.setAutoCorrectEnabled(enable_auto_correct);
-        QCOMPARE(auto_correct_enabled_spy.count(), enable_auto_correct ? 1 : 0);
-        QCOMPARE(editor.isAutoCorrectEnabled(), enable_auto_correct);
-
-        Q_FOREACH(const QChar &c, preedit) {
-            appendToPreedit(&editor, QString(c));
-        }
-
-        QCOMPARE(editor.text()->primaryCandidate(), expected_word_candidate);
-        QCOMPARE(spy.count(), expected_word_candidate_updates);
-
-        if (spy.count() > 0) {
-            WordCandidateList expected_word_candidate_list;
-            expected_word_candidate_list.append(WordCandidate(WordCandidate::SourcePrediction, expected_word_candidate));
-            QCOMPARE(spy.last().first().value<WordCandidateList>(), expected_word_candidate_list);
-        }
-
-        enforceCommit(&editor);
-        QCOMPARE(editor.text()->preedit(), QString());
-        QCOMPARE(host.commitStringHistory(), expected_commit_history);
-
-        if (spy.count() > 0) {
-            QCOMPARE(spy.takeLast().first().value<WordCandidateList>(), WordCandidateList());
-        }
-    }
-
-
-    Q_SLOT void testWordCandidatesChanged()
-    {
-        Editor editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures);
-        QSignalSpy spy(&editor, SIGNAL(wordCandidatesChanged(WordCandidateList)));
-
-        InputMethodHostProbe host;
-        editor.setHost(&host);
-
-        // no preedit => auto-commit:
-        appendToPreedit(&editor, "a");
-        QCOMPARE(spy.count(), 0);
-        QCOMPARE(host.commitStringHistory(), QString("a"));
-
-        // preedit changes => new word candidates:
-        editor.wordEngine()->setEnabled(true);
-        appendToPreedit(&editor, "b");
-        QCOMPARE(spy.count(), 1);
-
-        // check disabled-before-commit corner case:
-        editor.wordEngine()->setEnabled(false);
-        QCOMPARE(spy.count(), 2);
-
-        // word engine already disabled
-        // => clearCandidates() skips signal emission:
-        enforceCommit(&editor);
-        QCOMPARE(spy.count(), 2);
-        QCOMPARE(host.commitStringHistory(), QString("ab "));
-
-        // preedit changes => new word candidates:
-        editor.wordEngine()->setEnabled(true);
-        appendToPreedit(&editor, "c");
-        QCOMPARE(spy.count(), 3);
-
-        // preedit gets committed
-        // => candidates get cleared & candidatesChanged() emitted:
-        enforceCommit(&editor);
-        QCOMPARE(spy.count(), 4);
-        QCOMPARE(host.commitStringHistory(), QString("ab c "));
-    }
-
-    Q_SLOT void testWordRibbonVisible()
-    {
-        Editor editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures);
-        InputMethodHostProbe host;
-        editor.setHost(&host);
-
-        Logic::LayoutUpdater updater;
-        Logic::LayoutHelper layout;
-        updater.setLayout(&layout);
-
-        SharedStyle style(new Style);
-        style->setProfile("nokia-n9");
-        updater.setStyle(style);
-
-        Logic::connectLayoutUpdaterToTextEditor(&updater, &editor);
-        QSignalSpy spy(&updater, SIGNAL(wordRibbonVisibleChanged(bool)));
-        QCOMPARE(editor.wordEngine()->isEnabled(), false);
-        QCOMPARE(editor.isPreeditEnabled(), false);
-        QCOMPARE(updater.isWordRibbonVisible(), false);
-
-        appendToPreedit(&editor, "a");
-        QCOMPARE(host.commitStringHistory(), QString("a"));
-        QCOMPARE(layout.wordRibbon().candidates().isEmpty(), true);
-
-        editor.wordEngine()->setEnabled(true);
-        QCOMPARE(spy.count(), 1);
-        QCOMPARE(editor.wordEngine()->isEnabled(), true);
-        QCOMPARE(editor.isPreeditEnabled(), true);
-        QCOMPARE(updater.isWordRibbonVisible(), true);
-
-        appendToPreedit(&editor, "bcd");
-        const WordCandidate &candidate(layout.wordRibbon().candidates().first());
-        QCOMPARE(candidate.label().text(), QString("dcb"));
-
-        editor.wordEngine()->setEnabled(false);
-        QCOMPARE(spy.count(), 2);
-        QCOMPARE(editor.wordEngine()->isEnabled(), false);
-        QCOMPARE(editor.isPreeditEnabled(), false);
-        QCOMPARE(updater.isWordRibbonVisible(), false);
-        QCOMPARE(layout.wordRibbon().candidates().isEmpty(), true);
-    }
-};
-
-QTEST_MAIN(TestWordCandidates)
-#include "main.moc"
diff --git a/maliit-keyboard/tests/word-candidates/word-candidates.cpp b/maliit-keyboard/tests/word-candidates/word-candidates.cpp
new file mode 100644
index 0000000..e486616
--- /dev/null
+++ b/maliit-keyboard/tests/word-candidates/word-candidates.cpp
@@ -0,0 +1,244 @@
+/*
+ * This file is part of Maliit Plugins
+ *
+ * Copyright (C) 2012-2013 Canonical Ltd
+ *
+ * Contact: maliit-discuss@lists.maliit.org
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this list
+ * of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list
+ * of conditions and the following disclaimer in the documentation and/or other materials
+ * provided with the distribution.
+ * Neither the name of Nokia Corporation nor the names of its contributors may be
+ * used to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include "utils.h"
+#include "wordengineprobe.h"
+#include "common/inputmethodhostprobe.h"
+
+#include "plugin/editor.h"
+#include "models/key.h"
+#include "models/text.h"
+#include "logic/languagefeatures.h"
+#include "logic/layouthelper.h"
+#include "logic/layoutupdater.h"
+#include "logic/style.h"
+
+#include <QtCore>
+#include <QtTest>
+
+using namespace MaliitKeyboard;
+
+Q_DECLARE_METATYPE(WordCandidateList)
+
+namespace {
+
+void appendToPreedit(Editor *editor,
+                     const QString &appendix)
+{
+    Key k;
+    QCOMPARE(k.action(), Key::ActionInsert);
+
+    k.rLabel().setText(appendix);
+    editor->onKeyReleased(k);
+}
+
+
+void enforceCommit(Editor *editor)
+{
+    Key space;
+    space.setAction(Key::ActionSpace);
+    editor->onKeyReleased(space);
+}
+
+} // namespace
+
+class TestWordCandidates
+    : public QObject
+{
+    Q_OBJECT
+
+private:
+    Q_SLOT void initTestCase()
+    {
+        qRegisterMetaType<WordCandidateList>("WordCandidateList");
+    }
+
+    Q_SLOT void testPrediction_data()
+    {
+        QTest::addColumn<bool>("enable_preedit");
+        QTest::addColumn<bool>("enable_auto_correct");
+        QTest::addColumn<QString>("preedit");
+        QTest::addColumn<int>("expected_word_candidate_updates");
+        QTest::addColumn<QString>("expected_word_candidate");
+        QTest::addColumn<QString>("expected_commit_history");
+
+        QTest::newRow("preedit enabled")
+                << true << false << "preedit" << 7 << "tideerp" << "preedit ";
+
+        QTest::newRow("preedit + auto-correct enabled")
+                << true << true << "preedit" << 7 << "tideerp" << "tideerp ";
+
+        QTest::newRow("punctuated preedit + auto-correct enabled")
+                << true << true << "preedit." << 7 << "tideerp" << "tideerp. ";
+
+        QTest::newRow("preedit + auto-correct disabled")
+                << false << false << "commit" << 0 << "" << "commit ";
+
+        QTest::newRow("preedit disabled, auto-correct enabled")
+                << false << true << "commit" << 0 << "" << "commit ";
+    }
+
+    Q_SLOT void testPrediction()
+    {
+        QFETCH(bool, enable_preedit);
+        QFETCH(bool, enable_auto_correct);
+        QFETCH(QString, preedit);
+        QFETCH(int, expected_word_candidate_updates);
+        QFETCH(QString, expected_word_candidate);
+        QFETCH(QString, expected_commit_history);
+
+        Editor editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures);
+        QSignalSpy spy(&editor, SIGNAL(wordCandidatesChanged(WordCandidateList)));
+        QSignalSpy preedit_enabled_spy(&editor, SIGNAL(preeditEnabledChanged(bool)));
+        QSignalSpy auto_correct_enabled_spy(&editor, SIGNAL(autoCorrectEnabledChanged(bool)));
+
+        InputMethodHostProbe host;
+        editor.setHost(&host);
+
+        QVERIFY(not editor.isPreeditEnabled());
+        editor.wordEngine()->setEnabled(enable_preedit);
+        QCOMPARE(preedit_enabled_spy.count(), enable_preedit ? 1 : 0);
+        QCOMPARE(editor.isPreeditEnabled(), enable_preedit);
+
+        QVERIFY(not editor.isAutoCorrectEnabled());
+        editor.setAutoCorrectEnabled(enable_auto_correct);
+        QCOMPARE(auto_correct_enabled_spy.count(), enable_auto_correct ? 1 : 0);
+        QCOMPARE(editor.isAutoCorrectEnabled(), enable_auto_correct);
+
+        Q_FOREACH(const QChar &c, preedit) {
+            appendToPreedit(&editor, QString(c));
+        }
+
+        QCOMPARE(editor.text()->primaryCandidate(), expected_word_candidate);
+        QCOMPARE(spy.count(), expected_word_candidate_updates);
+
+        if (spy.count() > 0) {
+            WordCandidateList expected_word_candidate_list;
+            expected_word_candidate_list.append(WordCandidate(WordCandidate::SourcePrediction, expected_word_candidate));
+            QCOMPARE(spy.last().first().value<WordCandidateList>(), expected_word_candidate_list);
+        }
+
+        enforceCommit(&editor);
+        QCOMPARE(editor.text()->preedit(), QString());
+        QCOMPARE(host.commitStringHistory(), expected_commit_history);
+
+        if (spy.count() > 0) {
+            QCOMPARE(spy.takeLast().first().value<WordCandidateList>(), WordCandidateList());
+        }
+    }
+
+
+    Q_SLOT void testWordCandidatesChanged()
+    {
+        Editor editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures);
+        QSignalSpy spy(&editor, SIGNAL(wordCandidatesChanged(WordCandidateList)));
+
+        InputMethodHostProbe host;
+        editor.setHost(&host);
+
+        // no preedit => auto-commit:
+        appendToPreedit(&editor, "a");
+        QCOMPARE(spy.count(), 0);
+        QCOMPARE(host.commitStringHistory(), QString("a"));
+
+        // preedit changes => new word candidates:
+        editor.wordEngine()->setEnabled(true);
+        appendToPreedit(&editor, "b");
+        QCOMPARE(spy.count(), 1);
+
+        // check disabled-before-commit corner case:
+        editor.wordEngine()->setEnabled(false);
+        QCOMPARE(spy.count(), 2);
+
+        // word engine already disabled
+        // => clearCandidates() skips signal emission:
+        enforceCommit(&editor);
+        QCOMPARE(spy.count(), 2);
+        QCOMPARE(host.commitStringHistory(), QString("ab "));
+
+        // preedit changes => new word candidates:
+        editor.wordEngine()->setEnabled(true);
+        appendToPreedit(&editor, "c");
+        QCOMPARE(spy.count(), 3);
+
+        // preedit gets committed
+        // => candidates get cleared & candidatesChanged() emitted:
+        enforceCommit(&editor);
+        QCOMPARE(spy.count(), 4);
+        QCOMPARE(host.commitStringHistory(), QString("ab c "));
+    }
+
+    Q_SLOT void testWordRibbonVisible()
+    {
+        Editor editor(new Model::Text, new Logic::WordEngineProbe, new Logic::LanguageFeatures);
+        InputMethodHostProbe host;
+        editor.setHost(&host);
+
+        Logic::LayoutUpdater updater;
+        Logic::LayoutHelper layout;
+        updater.setLayout(&layout);
+
+        SharedStyle style(new Style);
+        style->setProfile("nokia-n9");
+        updater.setStyle(style);
+
+        Logic::connectLayoutUpdaterToTextEditor(&updater, &editor);
+        QSignalSpy spy(&updater, SIGNAL(wordRibbonVisibleChanged(bool)));
+        QCOMPARE(editor.wordEngine()->isEnabled(), false);
+        QCOMPARE(editor.isPreeditEnabled(), false);
+        QCOMPARE(updater.isWordRibbonVisible(), false);
+
+        appendToPreedit(&editor, "a");
+        QCOMPARE(host.commitStringHistory(), QString("a"));
+        QCOMPARE(layout.wordRibbon().candidates().isEmpty(), true);
+
+        editor.wordEngine()->setEnabled(true);
+        QCOMPARE(spy.count(), 1);
+        QCOMPARE(editor.wordEngine()->isEnabled(), true);
+        QCOMPARE(editor.isPreeditEnabled(), true);
+        QCOMPARE(updater.isWordRibbonVisible(), true);
+
+        appendToPreedit(&editor, "bcd");
+        const WordCandidate &candidate(layout.wordRibbon().candidates().first());
+        QCOMPARE(candidate.label().text(), QString("dcb"));
+
+        editor.wordEngine()->setEnabled(false);
+        QCOMPARE(spy.count(), 2);
+        QCOMPARE(editor.wordEngine()->isEnabled(), false);
+        QCOMPARE(editor.isPreeditEnabled(), false);
+        QCOMPARE(updater.isWordRibbonVisible(), false);
+        QCOMPARE(layout.wordRibbon().candidates().isEmpty(), true);
+    }
+};
+
+QTEST_MAIN(TestWordCandidates)
+
+#include "word-candidates.moc"
diff --git a/maliit-keyboard/tests/word-candidates/word-candidates.pro b/maliit-keyboard/tests/word-candidates/word-candidates.pro
deleted file mode 100644
index 862e71e..0000000
--- a/maliit-keyboard/tests/word-candidates/word-candidates.pro
+++ /dev/null
@@ -1,22 +0,0 @@
-include(../../config.pri)
-include(../common-check.pri)
-include(../../config-plugin.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../../..
-TARGET = word-candidates
-TEMPLATE = app
-QT = core testlib gui
-
-INCLUDEPATH += ../ ../../lib ../../
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_PLUGIN_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_VIEW_LIB} $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-HEADERS += \
-    wordengineprobe.h \
-
-SOURCES += \
-    wordengineprobe.cpp \
-    main.cpp \
-
-include(../../word-prediction.pri)
-
diff --git a/maliit-keyboard/view/view.pri b/maliit-keyboard/view/view.pri
deleted file mode 100644
index 59a478f..0000000
--- a/maliit-keyboard/view/view.pri
+++ /dev/null
@@ -1,7 +0,0 @@
-# config.pri has to be included before this file.
-
-enable-qt-mobility {
-    CONFIG += mobility
-    MOBILITY += feedback
-    DEFINES += HAVE_QT_MOBILITY
-}
diff --git a/maliit-keyboard/view/view.pro b/maliit-keyboard/view/view.pro
deleted file mode 100644
index 575a6c2..0000000
--- a/maliit-keyboard/view/view.pro
+++ /dev/null
@@ -1,39 +0,0 @@
-include(../config.pri)
-include(view.pri)
-
-TOP_BUILDDIR = $${OUT_PWD}/../..
-VERSION = 0.2.0
-TARGET = $${MALIIT_KEYBOARD_VIEW_TARGET}
-TEMPLATE = lib
-CONFIG += staticlib
-INCLUDEPATH = ../lib
-LIBS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-PRE_TARGETDEPS += $${TOP_BUILDDIR}/$${MALIIT_KEYBOARD_LIB}
-
-contains(QT_MAJOR_VERSION, 4) {
-    QT = core gui
-} else {
-    QT = core gui widgets
-}
-
-HEADERS += \
-    abstractfeedback.h \
-    nullfeedback.h \
-    surface.h \
-
-SOURCES += \
-    abstractfeedback.cpp \
-    nullfeedback.cpp \
-    surface.cpp \
-
-enable-qt-mobility {
-    HEADERS += soundfeedback.h
-    SOURCES += soundfeedback.cpp
-}
-
-disable-background-translucency {
-    DEFINES += DISABLE_TRANSLUCENT_BACKGROUND_HINT
-}
-
-include(../word-prediction.pri)
diff --git a/maliit-keyboard/word-prediction.pri b/maliit-keyboard/word-prediction.pri
deleted file mode 100644
index 5e04d17..0000000
--- a/maliit-keyboard/word-prediction.pri
+++ /dev/null
@@ -1,15 +0,0 @@
-# to be included at bottom of .pro files
-enable-presage {
-    DEFINES += HAVE_PRESAGE
-    LIBS += -lpresage
-}
-
-enable-hunspell {
-    CONFIG += link_pkgconfig
-    PKGCONFIG += hunspell
-    DEFINES += HAVE_HUNSPELL
-}
-
-disable-preedit {
-    DEFINES += DISABLE_PREEDIT
-}
diff --git a/maliit-plugins.pro b/maliit-plugins.pro
deleted file mode 100644
index c7964ec..0000000
--- a/maliit-plugins.pro
+++ /dev/null
@@ -1,86 +0,0 @@
-include(config.pri)
-
-!isEmpty(HELP) {
-    # Output help
-    help_string = \
-        Important build options: \
-        \\n\\t PREFIX: Install prefix for tools. Default: Maliit framework prefix \
-        \\n\\t\\t Note that the plugins themselves are installed under Maliit framework prefix \
-        \\n\\t LIBDIR: Library install directory. Default: $$PREFIX/lib \
-        \\n\\t MALIIT_DEFAULT_PROFILE: Default keyboard style. Default: nokia-n9 \
-        \\n\\t HUNSPELL_DICT_PATH: Path to hunspell dictionaries. Default: $$PREFIX/share/hunspell \
-        \\nRecognised CONFIG flags: \
-        \\n\\t enable-presage: Use presage to calculate word candidates (maliit-keyboard-plugin only) \
-        \\n\\t enable-hunspell: Use hunspell for error correction (maliit-keyboard-plugin only) \
-        \\n\\t disable-preedit: Always commit characters and never use preedit (maliit-keyboard-plugin only) \
-        \\n\\t enable-qt-mobility: Enable use of QtMobility (enables sound and haptic feedback) \
-        \\n\\t notests: Do not attempt to build tests \
-        \\n\\t nodoc: Do not build documentation \
-        \\n\\t disable-maliit-keyboard: Do not build the C++ reference keyboard (Maliit Keyboard) \
-        \\n\\t disable-nemo-keyboard: Do not build the QML reference keyboard (Nemo Keyboard) \
-        \\n\\t disable-background-translucency : Do not set translucent background hint on surfaces (workaround for non-compositing WMs) \
-        \\nInfluential environment variables: \
-        \\n\\t QMAKEFEATURES A mkspecs/features directory list to look for features. \
-        \\n\\t\\t Use it if a dependency is installed to non-default location. \
-        \\n\\t\\t Note that it must also be passed to qmake calls in subdirectories. \
-        \\nExamples: \
-        \\n\\t qmake \
-        \\n\\t qmake PREFIX=/usr LIBDIR=/usr/lib64 \
-
-    !build_pass:system(echo -e \"$$help_string\")
-} else {
-    config_string = Tip: Run qmake HELP=1 for a list of all supported build options
-
-    !build_pass:system(echo -e \"$$config_string\")
-}
-
-CONFIG += ordered
-TEMPLATE = subdirs
-
-!disable-nemo-keyboard:SUBDIRS += nemo-keyboard
-!disable-maliit-keyboard:SUBDIRS += maliit-keyboard
-!nodoc:SUBDIRS += doc
-
-DIST_NAME = $$MALIIT_PACKAGENAME-$$MALIIT_VERSION
-DIST_PATH = $$OUT_PWD/$$DIST_NAME
-TARBALL_SUFFIX = .tar.bz2
-TARBALL_PATH = $$DIST_PATH$$TARBALL_SUFFIX
-
-# The 'make dist' target
-# Creates a tarball
-QMAKE_EXTRA_TARGETS += release
-release.target = release
-release.commands += git archive HEAD --prefix=$$DIST_NAME/ | bzip2 > $$TARBALL_PATH;
-release.commands += md5sum $$TARBALL_PATH | cut -d \' \' -f 1 > $$DIST_PATH\\.md5
-
-# The 'make coverage' target
-# Builds plugins with coverage libs in separate directory.
-COVERAGE_CONFIG_STRING = CONFIG+=debug CONFIG+=nodoc CONFIG+=no-werror
-
-enable-presage {
-    COVERAGE_CONFIG_STRING += CONFIG+=enable-presage
-}
-
-enable-hunspell {
-    COVERAGE_CONFIG_STRING += CONFIG+=enable-hunspell
-}
-
-disable-preedit {
-    COVERAGE_CONFIG_STRING += CONFIG+=disable-preedit
-}
-
-enable-qt-mobility {
-    COVERAGE_CONFIG_STRING += CONFIG+=enable-qt-mobility
-}
-
-COVERAGE_DIR = coverage-build
-
-QMAKE_EXTRA_TARGETS += coverage
-coverage.target = coverage
-
-coverage.commands += $(MKDIR) $$COVERAGE_DIR &&
-coverage.commands += cd $$COVERAGE_DIR &&
-coverage.commands += $(QMAKE) -r PREFIX=\"$$PREFIX\" LIBDIR=\"$$LIBDIR\" MALIIT_DEFAULT_PROFILE=\"$$MALIIT_DEFAULT_PROFILE\" HUNSPELL_DICT_PATH=\"$$HUNSPELL_DICT_PATH\" $$COVERAGE_CONFIG_STRING LIBS+=\"$$LIBS\" INCLUDEPATH+=\"$$INCLUDEPATH\" LIBS+=-lgcov QMAKE_CXXFLAGS_DEBUG+=\"-fprofile-arcs -ftest-coverage\" QMAKE_LFLAGS_DEBUG+=\"-fprofile-arcs -ftest-coverage\" $$PWD/maliit-plugins.pro.coverage &&
-coverage.commands += make $(MAKEFLAGS) coverage
-
-coverage.clean_commands = rm -rf $$COVERAGE_DIR
diff --git a/maliit-plugins.pro.coverage b/maliit-plugins.pro.coverage
deleted file mode 100644
index f3fdac6..0000000
--- a/maliit-plugins.pro.coverage
+++ /dev/null
@@ -1,19 +0,0 @@
-include(maliit-plugins.pro)
-
-REPORTS_DIR = ../coverage-report
-INFO_FILE = maliit-keyboard.info
-
-# Here we override coverage commands to actually create coverage reports.
-coverage.commands =
-coverage.commands += lcov --directory . --capture --output-file $$INFO_FILE &&
-coverage.commands += lcov --directory . --output-file $$INFO_FILE --remove $$INFO_FILE '*/include/Qt*' '*/include/qt4/Qt*' '*/include/maliit/*' '*/include/c++/*' '*presage*.h' '*.moc' '*moc_*.cpp' 'tests/*' &&
-coverage.commands += rm -rf $$REPORTS_DIR &&
-coverage.commands += $(MKDIR) $$REPORTS_DIR &&
-coverage.commands += genhtml --title \"Maliit keyboard\" --output-directory $$REPORTS_DIR $$INFO_FILE
-coverage.depends = all check
-
-check.depends += precoverage
-
-QMAKE_EXTRA_TARGETS += precoverage
-precoverage.target = precoverage
-precoverage.commands = lcov --directory . --zerocounters
diff --git a/nemo-keyboard/nemo-keyboard.pro b/nemo-keyboard/nemo-keyboard.pro
deleted file mode 100644
index 70d5adf..0000000
--- a/nemo-keyboard/nemo-keyboard.pro
+++ /dev/null
@@ -1,20 +0,0 @@
-include(../config.pri)
-
-TEMPLATE = lib
-TARGET = dummy
-
-PLUGIN_FILE = nemo-keyboard.qml
-PLUGIN_DATA = org
-
-plugin.files = $${PLUGIN_FILE}
-plugin.CONFIG += no_check_exist
-plugin.path = $${MALIIT_PLUGINS_DIR}
-
-other_files.files = $${PLUGIN_DATA}/
-other_files.CONFIG += no_check_exist
-other_files.path = $${MALIIT_PLUGINS_DATA_DIR}
-
-QMAKE_CLEAN += libdummy.so*
-INSTALLS += plugin other_files
-
-
